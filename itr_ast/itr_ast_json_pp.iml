[@@@program]

[@@@require "yojson"]

[@@@import "itr_ast.iml"]

[@@@import "../src-core-pp/datetime_json.iml"]

open Format
open Itr_ast
open Yojson.Basic
open Datetime_json
module JU = Yojson.Basic.Util

let datetime_to_json : datetime -> t = function
  | UTCTimestamp d ->
      `Assoc [ ("UTCTimestamp", utctimestamp_micro_to_json d) ]
  | UTCTimeOnly d ->
      `Assoc [ ("UTCTimeOnly", utctimeonly_micro_to_json d) ]
  | UTCDateOnly d ->
      `Assoc [ ("UTCDateOnly", utcdateonly_to_json d) ]
  | LocalMktDate d ->
      `Assoc [ ("LocalMktDate", localmktdate_to_json d) ]
  | MonthYear d ->
      `Assoc [ ("MonthYear", monthyear_to_json d) ]
  | Duration d ->
      `Assoc [ ("Duration", duration_to_json d) ]


let rec literal_to_json : literal -> t = function
  | Bool b ->
      `Assoc [ ("Bool", `Bool b) ]
  | Int i ->
      `Assoc [ ("Int", `String (Z.to_string i)) ]
  | String s ->
      `Assoc [ ("String", `String (sprintf "\"%s\"" s)) ]
  | UnquotedString s ->
      `Assoc [ ("Unquoted_string", `String s) ]
  | Float q ->
      `Assoc [ ("Float", `Float (Q.to_float q)) ]
  | Coll l ->
      `Assoc [ ("Coll", `List (List.map record_item_to_json l)) ]
  | MapColl (d, l) ->
      `Assoc
        [ ( "MapColl"
          , `Assoc
              [ ("default", record_item_to_json d)
              ; ("elements", `List (List.map record_item_pair_to_json l))
              ] )
        ]
  | LiteralNone ->
      `Assoc [ ("None", `String "None") ]
  | LiteralSome e ->
      `Assoc [ ("Some", record_item_to_json e) ]
  | Datetime d ->
      `Assoc [ ("Datetime", datetime_to_json d) ]


and record_item_pair_to_json : record_item * record_item -> t = function
  | e1, e2 ->
      `Assoc
        [ ("key", record_item_to_json e1); ("value", record_item_to_json e2) ]


and value_to_json : value -> t = function
  | Literal l ->
      `Assoc [ ("Literal", literal_to_json l) ]
  | Variable v ->
      `Assoc [ ("Variable", `String (Var.name v)) ]
  | MessageValue mv ->
      `Assoc [ ("Message_value", Message_value.to_json mv) ]
  | ConnectionRef c ->
      `Assoc [ ("Connection_ref", Connection_ref.to_json c) ]
  | Now ->
      `Assoc [ ("Now", `String "Now") ]
  | Counter ->
      `Assoc [ ("Counter", `String "Counter") ]
  | ObjectProperty op ->
      `Assoc
        [ ( "ObjectProperty"
          , `Assoc
              [ ("obj", record_item_to_json op.obj)
              ; ("index", opt_index_to_json op.index)
              ; ("prop", `String op.prop)
              ] )
        ]
  | Funcall { func; args } ->
      `Assoc
        [ ( "Funcall"
          , `Assoc
              [ ("name", `String func)
              ; ("args", `List (List.map record_item_to_json args))
              ] )
        ]


and opt_index_to_json : Z.t option -> t = function
  | None ->
      `Null
  | Some i ->
      `Int (Z.to_int i)


and expr_to_json : expr -> t = function
  | Value v ->
      `Assoc [ ("Value", value_to_json v) ]
  | Not e ->
      `Assoc [ ("Not", expr_to_json e) ]
  | Or { lhs; rhs } ->
      `Assoc
        [ ("Or", `Assoc [ ("lhs", expr_to_json lhs); ("rhs", expr_to_json rhs) ])
        ]
  | And { lhs; rhs } ->
      `Assoc
        [ ( "And"
          , `Assoc [ ("lhs", expr_to_json lhs); ("rhs", expr_to_json rhs) ] )
        ]
  | Eq { lhs; rhs } ->
      `Assoc
        [ ( "Eq"
          , `Assoc
              [ ("lhs", record_item_to_json lhs)
              ; ("rhs", record_item_to_json rhs)
              ] )
        ]
  | Cmp { lhs; op; rhs } ->
      `Assoc
        [ ( "Cmp"
          , `Assoc
              [ ("lhs", expr_to_json lhs)
              ; ("op", `String op)
              ; ("rhs", expr_to_json rhs)
              ] )
        ]
  | Add { lhs; op; rhs } ->
      `Assoc
        [ ( "Add"
          , `Assoc
              [ ("lhs", expr_to_json lhs)
              ; ("op", `String (Char.escaped op))
              ; ("rhs", expr_to_json rhs)
              ] )
        ]
  | Mul { lhs; op; rhs } ->
      `Assoc
        [ ( "Mul"
          , `Assoc
              [ ("lhs", expr_to_json lhs)
              ; ("op", `String (Char.escaped op))
              ; ("rhs", expr_to_json rhs)
              ] )
        ]
  | In { el; set } ->
      `Assoc
        [ ("In", `Assoc [ ("el", expr_to_json el); ("set", value_to_json set) ])
        ]


and record_to_json (record : record) =
  let item_to_json ((name : string), (item : record_item)) =
    `Assoc [ ("name", `String name); ("record_item", record_item_to_json item) ]
  in
  `Assoc
    [ ( "Record"
      , `Assoc
          [ ("name", `String record.name)
          ; ( "elements"
            , `List
                (List.map
                   item_to_json
                   (String_map.to_list record.elements |> CCList.rev) ) )
          ] )
    ]


and record_item_to_json (item : record_item) =
  match item with
  | Rec_value value ->
      `Assoc [ ("Rec_value", expr_to_json value) ]
  | Rec_record items ->
      `Assoc [ ("Rec_record", record_to_json items) ]
  | Rec_repeating_group { num_in_group_field; elements; name; message_template }
    ->
      `Assoc
        [ ( "Rec_repeating_group"
          , `Assoc
              [ ("num_in_group_field", `String num_in_group_field)
              ; ("elements", `List (List.map record_to_json elements))
              ; ("name", `String name)
              ; ( "message_template"
                , match message_template with
                  | None ->
                      `Null
                  | Some message_template ->
                      `String message_template )
              ] )
        ]


let field_to_json (f : field) =
  `Assoc [ ("name", `String f.name); ("value", record_item_to_json f.value) ]


let rec instruction_to_json : instruction -> t = function
  | Break ->
      `Assoc [ ("Break", `Null) ]
  | Print e ->
      `Assoc [ ("Print", expr_to_json e) ]
  | Run e ->
      `Assoc [ ("Run", expr_to_json e) ]
  | Sleep e ->
      `Assoc [ ("Sleep", expr_to_json e) ]
  | Assert e ->
      `Assoc [ ("Assert", expr_to_json e) ]
  | Action { name; fields } ->
      `Assoc
        [ ( "Action"
          , `Assoc
              [ ("name", `String name)
              ; ("fields", `List (List.map field_to_json fields))
              ] )
        ]
  | Message { name; fields } ->
      `Assoc
        [ ( "Message"
          , `Assoc
              [ ("name", `String name)
              ; ("fields", `List (List.map field_to_json fields))
              ] )
        ]
  | Fail e ->
      `Assoc
        [ ("Fail", match e with None -> `Null | Some e -> expr_to_json e) ]
  | Return e ->
      `Assoc
        [ ("Return", match e with None -> `Null | Some e -> expr_to_json e) ]
  | Goto l ->
      `Assoc [ ("Goto", `String l) ]
  | Label l ->
      `Assoc [ ("Label", `String l) ]
  | Disconnect s ->
      `Assoc [ ("Disconnect", Connection_ref.to_json s) ]
  | Unset v ->
      `Assoc [ ("Unset", value_to_json v) ]
  | Cleanup i ->
      `Assoc [ ("Cleanup", `List (List.map instruction_to_json i)) ]
  | OnExpired i ->
      `Assoc [ ("Onexpired", `List (List.map instruction_to_json i)) ]
  | ForEach { dataset; instructions } ->
      `Assoc
        [ ( "Foreach"
          , `Assoc
              [ ("dataset", expr_to_json dataset)
              ; ( "instructions"
                , `List (List.map instruction_to_json instructions) )
              ] )
        ]
  | Repeat { ntimes; instructions } ->
      `Assoc
        [ ( "Repeat"
          , `Assoc
              [ ( "ntimes"
                , match ntimes with
                  | None ->
                      `Null
                  | Some ntimes ->
                      expr_to_json ntimes )
              ; ( "instructions"
                , `List (List.map instruction_to_json instructions) )
              ] )
        ]
  | Connect { connection; timeout; block } ->
      `Assoc
        [ ( "Connect"
          , `Assoc
              [ ("connection", Connection_ref.to_json connection)
              ; ( "timeout"
                , match timeout with
                  | None ->
                      `Null
                  | Some timeout ->
                      expr_to_json timeout )
              ; ("block", `Bool block)
              ] )
        ]
  | Set { prop; value } ->
      `Assoc
        [ ( "Set"
          , `Assoc
              [ ("prop", `String prop); ("value", record_item_to_json value) ]
          )
        ]
  | Call { variable; call } ->
      `Assoc
        [ ( "Call"
          , `Assoc
              [ ( "variable"
                , match variable with
                  | None ->
                      `Null
                  | Some v ->
                      `String (Var.name v) )
              ; ("call", value_to_json call)
              ] )
        ]
  | Send { variable; template; connection; using; withs } ->
      `Assoc
        [ ( "Send"
          , `Assoc
              [ ( "variable"
                , match variable with
                  | None ->
                      `Null
                  | Some variable ->
                      `String (Var.name variable) )
              ; ("template", Template.to_json template)
              ; ("connection", Connection_ref.to_json connection)
              ; ("using", match using with None -> `Null | Some u -> `String u)
              ; ( "withs"
                , match withs with
                  | None ->
                      `Null
                  | Some withs ->
                      record_to_json withs )
              ] )
        ]
  | ExpectingOf { variable; expecting } ->
      `Assoc
        [ ( "ExpectingOf"
          , `Assoc
              [ ("variable", `String (Var.name variable))
              ; ("expecting", expecting_to_json expecting)
              ] )
        ]
  | Template { variable; template; connection; using } ->
      `Assoc
        [ ( "Template"
          , `Assoc
              [ ( "variable"
                , match variable with
                  | None ->
                      `Null
                  | Some variable ->
                      `String (Var.name variable) )
              ; ("template", Template.to_json template)
              ; ("connection", Connection_ref.to_json connection)
              ; ("using", match using with None -> `Null | Some u -> `String u)
              ] )
        ]
  | Receive { variable; connection; timeout; where; expecting; example } ->
      `Assoc
        [ ( "Receive"
          , `Assoc
              [ ( "variable"
                , match variable with
                  | None ->
                      `Null
                  | Some variable ->
                      `String (Var.name variable) )
              ; ("connection", Connection_ref.to_json connection)
              ; ( "timeout"
                , match timeout with
                  | None ->
                      `Null
                  | Some timeout ->
                      expr_to_json timeout )
              ; ("where", expr_to_json where)
              ; ( "expecting"
                , match expecting with
                  | None ->
                      `Null
                  | Some e ->
                      expecting_to_json e )
              ; ("example", record_to_json example)
              ] )
        ]
  | IfThenElse { cond; then_; else_ } ->
      `Assoc
        [ ( "IfThenElse"
          , `Assoc
              [ ("cond", expr_to_json cond)
              ; ("then", `List (List.map instruction_to_json then_))
              ; ("else", `List (List.map instruction_to_json else_))
              ] )
        ]
  | FunctionDef { name; args; body } ->
      `Assoc
        [ ( "FunctionDef"
          , `Assoc
              [ ("name", `String name)
              ; ("args", `List (List.map tt_to_json args))
              ; ("body", `List (List.map instruction_to_json body))
              ] )
        ]
  | Comment text ->
      `Assoc [ ("Comment", `String text) ]


and expecting_to_json (expecting : expecting) =
  `Assoc
    [ ( "modifier"
      , match expecting.modifier with
        | None ->
            `Null
        | Some `Only ->
            `String "only"
        | Some `Only_supported ->
            `String "only supported" )
    ; ("relevant_exprs", `List (List.map expr_to_json expecting.relevant_exprs))
    ; ("common_exprs", `List (List.map expr_to_json expecting.common_exprs))
    ; ("qe_modified_exprs", `List (List.map expr_to_json expecting.qe_modified_exprs))
    ; ("nullable_exprs", `List (List.map expr_to_json expecting.nullable_exprs))
    ]


and tt_to_json a =
  `Assoc
    [ ( "typed_term"
      , `Assoc
          [ ("name", `String a.name)
          ; ("type", match a.type_ with None -> `Null | Some t -> `String t)
          ] )
    ]


let instructions_to_json is msgs_of_step =
  `Assoc
    [ ( "msgs"
      , `List
          (List.map Model_messages_json.json_of_model_msg_opt_def msgs_of_step)
      )
    ; ("instructions", `List (List.map instruction_to_json is))
    ]


[@@@logic]
