(* Imandra Inc. copyright 2022 *)
[@@@import "../../src-core/datetime.iml"]
open Datetime;;
[@@@import "model_app_enums.iml"]
open Model_app_enums;;
[@@@import "model_repeating_groups.iml"]
open Model_repeating_groups;;
[@@@import "model_tags.iml"]
open Model_tags;;
[@@@import "../../src-core/numeric.iml"]
open Numeric;;
[@@@import "../../src-core-time-defaults/time_defaults.iml"]
open Time_defaults;;


type mod_newordersingle_defopt_data = {
(** Unique identifier of the order as assigned by institution or by the intermediary (CIV term, not a hub/service bureau) with closest association with the investor.*)
    mod_def_opt_f_NewOrderSingle_ClOrdID : LString.t option;
    mod_def_opt_f_NewOrderSingle_Side : model_fix_side;
(** Time this order request was initiated/released by the trader, trading system, or intermediary.*)
    mod_def_opt_f_NewOrderSingle_TransactTime : fix_utctimestamp_milli;
    mod_def_opt_f_NewOrderSingle_OrdType : model_fix_ordtype;
(** One of CashOrderQty, OrderQty, or (for CIV only) OrderPercent is required. Note that unless otherwise specified, only one of CashOrderQty, OrderQty, or OrderPercent should be specified.*)
    mod_def_opt_f_NewOrderSingle_OrderQtyData_OrderQty : fix_float_6;
    mod_def_opt_f_NewOrderSingle_SpreadProportion : fix_float option;
(** Required for limit OrdTypes. For F/X orders, should be the "all-in" rate (spot rate adjusted for forward points). Can be used to specify a limit price for a pegged order, previously indicated, etc.*)
    mod_def_opt_f_NewOrderSingle_Price : fix_float_2 option;
    mod_def_opt_f_NewOrderSingle_Account : LString.t option;
(** Can contain multiple instructions, space delimited. If OrdType=P, exactly one of the following values (ExecInst = L, R, M, P, O, T, W, a, d) must be specified.*)
    mod_def_opt_f_NewOrderSingle_ExecInst : (model_fix_execinst,bool) Map.t option;
(** Insert here the set of "Parties" (firm identification) fields defined in "Common Components of Application Messages"*)
    mod_def_opt_f_NewOrderSingle_Parties : model_fix_rec_parties
}
;;

type mod_newordersingle_data = {
(** Unique identifier of the order as assigned by institution or by the intermediary (CIV term, not a hub/service bureau) with closest association with the investor.*)
    mod_f_NewOrderSingle_ClOrdID : LString.t option;
    mod_f_NewOrderSingle_Side : model_fix_side;
(** Time this order request was initiated/released by the trader, trading system, or intermediary.*)
    mod_f_NewOrderSingle_TransactTime : fix_utctimestamp_milli;
    mod_f_NewOrderSingle_OrdType : model_fix_ordtype;
(** One of CashOrderQty, OrderQty, or (for CIV only) OrderPercent is required. Note that unless otherwise specified, only one of CashOrderQty, OrderQty, or OrderPercent should be specified.*)
    mod_f_NewOrderSingle_OrderQtyData_OrderQty : fix_float_6;
    mod_f_NewOrderSingle_SpreadProportion : fix_float option;
(** Required for limit OrdTypes. For F/X orders, should be the "all-in" rate (spot rate adjusted for forward points). Can be used to specify a limit price for a pegged order, previously indicated, etc.*)
    mod_f_NewOrderSingle_Price : fix_float_2 option;
    mod_f_NewOrderSingle_Account : LString.t option;
(** Can contain multiple instructions, space delimited. If OrdType=P, exactly one of the following values (ExecInst = L, R, M, P, O, T, W, a, d) must be specified.*)
    mod_f_NewOrderSingle_ExecInst : (model_fix_execinst,bool) Map.t;
(** Insert here the set of "Parties" (firm identification) fields defined in "Common Components of Application Messages"*)
    mod_f_NewOrderSingle_Parties : model_fix_rec_parties
}
;;

type mod_executionreport_defopt_data = {
(** OrderID is required to be unique for each chain of orders.*)
    mod_def_opt_f_ExecutionReport_OrderID : LString.t;
(** Unique identifier of execution message as assigned by sell-side (broker, exchange, ECN) (will be 0 (zero) forExecType=I (Order Status)).*)
    mod_def_opt_f_ExecutionReport_ExecID : LString.t;
(** Describes the purpose of the execution report.*)
    mod_def_opt_f_ExecutionReport_ExecType : model_fix_exectype;
(** Describes the current state of a CHAIN of orders, same scope as OrderQty, CumQty, LeavesQty, and AvgPx*)
    mod_def_opt_f_ExecutionReport_OrdStatus : model_fix_ordstatus;
    mod_def_opt_f_ExecutionReport_Side : model_fix_side;
(** One of CashOrderQty, OrderQty, or (for CIV only) OrderPercent is required. Note that unless otherwise specified, only one of CashOrderQty, OrderQty, or OrderPercent should be specified.*)
    mod_def_opt_f_ExecutionReport_OrderQtyData_OrderQty : fix_float_6;
(** Quantity open for further execution. If the OrdStatus is Canceled, DoneForTheDay, Expired, Calculated, or Rejected (in which case the order is no longer active) then LeavesQty could be 0, otherwise LeavesQty = OrderQty - CumQty.*)
    mod_def_opt_f_ExecutionReport_LeavesQty : fix_float_6;
(** Currently executed quantity for chain of orders.*)
    mod_def_opt_f_ExecutionReport_CumQty : fix_float_6;
    mod_def_opt_f_ExecutionReport_Text : LString.t option;
(** Insert here the set of "Parties" (firm identification) fields defined in "Common Components of Application Messages"*)
    mod_def_opt_f_ExecutionReport_Parties : model_fix_rec_parties;
(** Can contain multiple instructions, space delimited.*)
    mod_def_opt_f_ExecutionReport_ExecInst : (model_fix_execinst,bool) Map.t
}
;;

type mod_executionreport_data = {
(** OrderID is required to be unique for each chain of orders.*)
    mod_f_ExecutionReport_OrderID : LString.t;
(** Unique identifier of execution message as assigned by sell-side (broker, exchange, ECN) (will be 0 (zero) forExecType=I (Order Status)).*)
    mod_f_ExecutionReport_ExecID : LString.t;
(** Describes the purpose of the execution report.*)
    mod_f_ExecutionReport_ExecType : model_fix_exectype;
(** Describes the current state of a CHAIN of orders, same scope as OrderQty, CumQty, LeavesQty, and AvgPx*)
    mod_f_ExecutionReport_OrdStatus : model_fix_ordstatus;
    mod_f_ExecutionReport_Side : model_fix_side;
(** One of CashOrderQty, OrderQty, or (for CIV only) OrderPercent is required. Note that unless otherwise specified, only one of CashOrderQty, OrderQty, or OrderPercent should be specified.*)
    mod_f_ExecutionReport_OrderQtyData_OrderQty : fix_float_6;
(** Quantity open for further execution. If the OrdStatus is Canceled, DoneForTheDay, Expired, Calculated, or Rejected (in which case the order is no longer active) then LeavesQty could be 0, otherwise LeavesQty = OrderQty - CumQty.*)
    mod_f_ExecutionReport_LeavesQty : fix_float_6;
(** Currently executed quantity for chain of orders.*)
    mod_f_ExecutionReport_CumQty : fix_float_6;
    mod_f_ExecutionReport_Text : LString.t option;
(** Insert here the set of "Parties" (firm identification) fields defined in "Common Components of Application Messages"*)
    mod_f_ExecutionReport_Parties : model_fix_rec_parties;
(** Can contain multiple instructions, space delimited.*)
    mod_f_ExecutionReport_ExecInst : (model_fix_execinst,bool) Map.t
}
;;

type model_msg = 
    | FIX_Msg_NewOrderSingle of mod_newordersingle_data
    | FIX_Msg_ExecutionReport of mod_executionreport_data
;;

type model_msg_opt_def = 
    | FIX_Msg_Def_Opt_NewOrderSingle of mod_newordersingle_defopt_data
    | FIX_Msg_Def_Opt_ExecutionReport of mod_executionreport_defopt_data
;;

let is_msg_opt_def_inbound (msg : model_msg_opt_def)  =
    (match msg with
        | FIX_Msg_Def_Opt_NewOrderSingle _ -> true
        | FIX_Msg_Def_Opt_ExecutionReport _ -> false
    )
;;

let is_msg_inbound (msg : model_msg)  =
    (match msg with
        | FIX_Msg_NewOrderSingle _ -> true
        | FIX_Msg_ExecutionReport _ -> false
    )
;;

type field_missing_or_invalid_data = {
    field_missing_or_invalid_data_field : m_field_tag;
    field_missing_of_invalid_data_msg : m_msg_tag;
    repeating_group_origin : m_rgs_tag option
}
;;

type model_top_level_msg = 
    | FIX_TL_Normal of model_msg_opt_def
    | FIX_TL_Req_Field_Missing of field_missing_or_invalid_data
    | FIX_TL_Req_Field_Invalid of field_missing_or_invalid_data
    | FIX_TL_PossibleResend of model_msg_opt_def
    | FIX_TL_None 
;;

