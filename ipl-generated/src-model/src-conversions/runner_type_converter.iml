(* Imandra Inc. copyright 2022 *)
[@@@import "enum_converter.iml"]
open Enum_converter;;
[@@@import "../../src-protocol-exts/full_app_messages.iml"]
open Full_app_messages;;
[@@@import "../../src-protocol-exts/full_app_records.iml"]
open Full_app_records;;
[@@@import "../src-types/model_app_enums.iml"]
open Model_app_enums;;
[@@@import "../src-types/model_messages.iml"]
open Model_messages;;
[@@@import "repeating_groups_converter.iml"]
open Repeating_groups_converter;;
[@@@import "type_converter.iml"]
open Type_converter;;


let convert_opt_def_model_to_full_NewOrderSingle (msg : mod_newordersingle_defopt_data)  =
    FIX_Full_Msg_NewOrderSingle {
        f_NewOrderSingle_ClOrdID = msg.mod_def_opt_f_NewOrderSingle_ClOrdID;
        f_NewOrderSingle_Parties = convert__model_to_full_Parties msg.mod_def_opt_f_NewOrderSingle_Parties;
        f_NewOrderSingle_Account = msg.mod_def_opt_f_NewOrderSingle_Account;
        f_NewOrderSingle_ExecInst = Option.map (fun d -> 
        convert__model_to_full_ExecInst d list_model_vals_ExecInst
        ) msg.mod_def_opt_f_NewOrderSingle_ExecInst;
        f_NewOrderSingle_Side = Some (Ok msg.mod_def_opt_f_NewOrderSingle_Side);
        f_NewOrderSingle_TransactTime = Some msg.mod_def_opt_f_NewOrderSingle_TransactTime;
        f_NewOrderSingle_OrderQtyData = {
            f_OrderQtyData_OrderQty = Some msg.mod_def_opt_f_NewOrderSingle_OrderQtyData_OrderQty
        };
        f_NewOrderSingle_OrdType = Some (Ok msg.mod_def_opt_f_NewOrderSingle_OrdType);
        f_NewOrderSingle_Price = msg.mod_def_opt_f_NewOrderSingle_Price;
        f_NewOrderSingle_SpreadProportion = msg.mod_def_opt_f_NewOrderSingle_SpreadProportion
    }
    [@@macro]
;;

let convert_opt_def_model_to_full_ExecutionReport (msg : mod_executionreport_defopt_data)  =
    FIX_Full_Msg_ExecutionReport {
        f_ExecutionReport_OrderID = Some msg.mod_def_opt_f_ExecutionReport_OrderID;
        f_ExecutionReport_Parties = convert__model_to_full_Parties msg.mod_def_opt_f_ExecutionReport_Parties;
        f_ExecutionReport_ExecID = Some msg.mod_def_opt_f_ExecutionReport_ExecID;
        f_ExecutionReport_ExecType = Some (Ok msg.mod_def_opt_f_ExecutionReport_ExecType);
        f_ExecutionReport_OrdStatus = Some (Ok msg.mod_def_opt_f_ExecutionReport_OrdStatus);
        f_ExecutionReport_Side = Some (Ok msg.mod_def_opt_f_ExecutionReport_Side);
        f_ExecutionReport_OrderQtyData = {
            f_OrderQtyData_OrderQty = Some msg.mod_def_opt_f_ExecutionReport_OrderQtyData_OrderQty
        };
        f_ExecutionReport_ExecInst = Some (convert__model_to_full_ExecInst msg.mod_def_opt_f_ExecutionReport_ExecInst list_model_vals_ExecInst);
        f_ExecutionReport_LeavesQty = Some msg.mod_def_opt_f_ExecutionReport_LeavesQty;
        f_ExecutionReport_CumQty = Some msg.mod_def_opt_f_ExecutionReport_CumQty;
        f_ExecutionReport_Text = msg.mod_def_opt_f_ExecutionReport_Text
    }
    [@@macro]
;;

let convert_model_to_full_fix (msg : model_msg_opt_def)  =
    (match msg with
        | FIX_Msg_Def_Opt_NewOrderSingle msg_data -> (convert_opt_def_model_to_full_NewOrderSingle msg_data)
        | FIX_Msg_Def_Opt_ExecutionReport msg_data -> (convert_opt_def_model_to_full_ExecutionReport msg_data)
    )
;;

