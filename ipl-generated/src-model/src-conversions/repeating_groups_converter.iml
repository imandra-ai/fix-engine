(* Imandra Inc. copyright 2022 *)
[@@@import "../../src-protocol-exts/full_app_records.iml"]
open Full_app_records;;
[@@@import "../src-types/model_repeating_groups.iml"]
open Model_repeating_groups;;
[@@@import "../src-types/model_tags.iml"]
open Model_tags;;


type rg_reject_type_ptyssubgrp = 
    | Rg_success_ptyssubgrp of model_fix_rec_ptyssubgrp
    | Rg_missing_field_failure_ptyssubgrp of (m_field_tag*m_rgs_tag)
    | Rg_invalid_enum_failure_ptyssubgrp of (m_field_tag*m_rgs_tag)
;;

type rg_reject_type_parties = 
    | Rg_success_parties of model_fix_rec_parties
    | Rg_missing_field_failure_parties of (m_field_tag*m_rgs_tag)
    | Rg_invalid_enum_failure_parties of (m_field_tag*m_rgs_tag)
;;

type rg_reject_inner_type_ptyssubgrp = 
    | Rg_inner_missing_field_failure_ptyssubgrp of (m_field_tag*m_rgs_tag)
    | Rg_inner_invalid_enum_failure_ptyssubgrp of (m_field_tag*m_rgs_tag)
    | Rg_inner_success_ptyssubgrp of model_fix_inner_ptyssubgrp
;;

type rg_reject_inner_type_parties = 
    | Rg_inner_missing_field_failure_parties of (m_field_tag*m_rgs_tag)
    | Rg_inner_invalid_enum_failure_parties of (m_field_tag*m_rgs_tag)
    | Rg_inner_success_parties of model_fix_inner_parties
;;

let rec cap_length (d) (x) (h)  =
    (match d with
        | [] -> ((min) x h)
        | _ :: t -> (cap_length t ((+) x 1) h)
    )
;;

let rec map_convert__model_to_full_RG_PtysSubGrp (d) (x) (acc)  =
    (match d with
        | [] -> {
            f_PtysSubGrp_num_field = Some x;
            f_PtysSubGrp_entries = acc
        }
        | h :: t -> (map_convert__model_to_full_RG_PtysSubGrp t x ((@) acc ([(convert__model_to_full_RG_PtysSubGrp h)])))
    ) and 
convert__model_to_full_RG_PtysSubGrp (rec_in : model_fix_inner_ptyssubgrp)  =
    {
        f_PtysSubGrp_PartySubID = rec_in.mod_f_PtysSubGrp_PartySubID
    } and 
convert__model_to_full_PtysSubGrp (rec_in : model_fix_rec_ptyssubgrp)  =
    let d = []
    in
    let d = (match rec_in.rg_PtysSubGrp_element_0 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_PtysSubGrp_element_1 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_PtysSubGrp_element_2 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_PtysSubGrp_element_3 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_PtysSubGrp_element_4 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    map_convert__model_to_full_RG_PtysSubGrp d (cap_length d 0 5) []
;;

let rec convert__full_to_model_PtysSubGrp (rec_in : fix_rg_ptyssubgrp)  =
    let block4 = None
    in
    let block3 = None
    in
    let block2 = None
    in
    let block1 = None
    in
    let block0 = None
    in
    let t = rec_in
    in
    let t = t.f_PtysSubGrp_entries
    in
    (match t with
        | [] -> (Rg_success_ptyssubgrp {
            rg_PtysSubGrp_element_4 = block4;
            rg_PtysSubGrp_element_3 = block3;
            rg_PtysSubGrp_element_2 = block2;
            rg_PtysSubGrp_element_1 = block1;
            rg_PtysSubGrp_element_0 = block0
        })
        | h :: t -> ((match convert__full_to_model_RG_PtysSubGrp h with
            | Rg_inner_success_ptyssubgrp x -> let block0 = Some x
            in
            (match t with
                | [] -> (Rg_success_ptyssubgrp {
                    rg_PtysSubGrp_element_4 = block4;
                    rg_PtysSubGrp_element_3 = block3;
                    rg_PtysSubGrp_element_2 = block2;
                    rg_PtysSubGrp_element_1 = block1;
                    rg_PtysSubGrp_element_0 = block0
                })
                | h :: t -> ((match convert__full_to_model_RG_PtysSubGrp h with
                    | Rg_inner_success_ptyssubgrp x -> let block1 = Some x
                    in
                    (match t with
                        | [] -> (Rg_success_ptyssubgrp {
                            rg_PtysSubGrp_element_4 = block4;
                            rg_PtysSubGrp_element_3 = block3;
                            rg_PtysSubGrp_element_2 = block2;
                            rg_PtysSubGrp_element_1 = block1;
                            rg_PtysSubGrp_element_0 = block0
                        })
                        | h :: t -> ((match convert__full_to_model_RG_PtysSubGrp h with
                            | Rg_inner_success_ptyssubgrp x -> let block2 = Some x
                            in
                            (match t with
                                | [] -> (Rg_success_ptyssubgrp {
                                    rg_PtysSubGrp_element_4 = block4;
                                    rg_PtysSubGrp_element_3 = block3;
                                    rg_PtysSubGrp_element_2 = block2;
                                    rg_PtysSubGrp_element_1 = block1;
                                    rg_PtysSubGrp_element_0 = block0
                                })
                                | h :: t -> ((match convert__full_to_model_RG_PtysSubGrp h with
                                    | Rg_inner_success_ptyssubgrp x -> let block3 = Some x
                                    in
                                    (match t with
                                        | [] -> (Rg_success_ptyssubgrp {
                                            rg_PtysSubGrp_element_4 = block4;
                                            rg_PtysSubGrp_element_3 = block3;
                                            rg_PtysSubGrp_element_2 = block2;
                                            rg_PtysSubGrp_element_1 = block1;
                                            rg_PtysSubGrp_element_0 = block0
                                        })
                                        | h :: _t -> ((match convert__full_to_model_RG_PtysSubGrp h with
                                            | Rg_inner_success_ptyssubgrp x -> let block4 = Some x
                                            in
                                            Rg_success_ptyssubgrp {
                                                rg_PtysSubGrp_element_4 = block4;
                                                rg_PtysSubGrp_element_3 = block3;
                                                rg_PtysSubGrp_element_2 = block2;
                                                rg_PtysSubGrp_element_1 = block1;
                                                rg_PtysSubGrp_element_0 = block0
                                            }
                                            | Rg_inner_invalid_enum_failure_ptyssubgrp x -> (Rg_invalid_enum_failure_ptyssubgrp ((x)))
                                            | Rg_inner_missing_field_failure_ptyssubgrp x -> (Rg_missing_field_failure_ptyssubgrp ((x)))
                                        )
                                        )
                                    )
                                    | Rg_inner_invalid_enum_failure_ptyssubgrp x -> (Rg_invalid_enum_failure_ptyssubgrp ((x)))
                                    | Rg_inner_missing_field_failure_ptyssubgrp x -> (Rg_missing_field_failure_ptyssubgrp ((x)))
                                )
                                )
                            )
                            | Rg_inner_invalid_enum_failure_ptyssubgrp x -> (Rg_invalid_enum_failure_ptyssubgrp ((x)))
                            | Rg_inner_missing_field_failure_ptyssubgrp x -> (Rg_missing_field_failure_ptyssubgrp ((x)))
                        )
                        )
                    )
                    | Rg_inner_invalid_enum_failure_ptyssubgrp x -> (Rg_invalid_enum_failure_ptyssubgrp ((x)))
                    | Rg_inner_missing_field_failure_ptyssubgrp x -> (Rg_missing_field_failure_ptyssubgrp ((x)))
                )
                )
            )
            | Rg_inner_invalid_enum_failure_ptyssubgrp x -> (Rg_invalid_enum_failure_ptyssubgrp ((x)))
            | Rg_inner_missing_field_failure_ptyssubgrp x -> (Rg_missing_field_failure_ptyssubgrp ((x)))
        )
        )
    ) and 
convert__full_to_model_RG_PtysSubGrp (rec_in : fix_rg_inner_ptyssubgrp)  =
    let c_mod_f_PtysSubGrp_PartySubID = rec_in.f_PtysSubGrp_PartySubID
    in
    Rg_inner_success_ptyssubgrp {
        mod_f_PtysSubGrp_PartySubID = c_mod_f_PtysSubGrp_PartySubID
    }
;;

let rec map_convert__model_to_full_RG_Parties (d) (x) (acc)  =
    (match d with
        | [] -> {
            f_Parties_num_field = Some x;
            f_Parties_entries = acc
        }
        | h :: t -> (map_convert__model_to_full_RG_Parties t x ((@) acc ([(convert__model_to_full_RG_Parties h)])))
    ) and 
convert__model_to_full_RG_Parties (rec_in : model_fix_inner_parties)  =
    {
        f_Parties_PartyID = Some rec_in.mod_f_Parties_PartyID;
        f_Parties_PartyIndex = Some rec_in.mod_f_Parties_PartyIndex;
        f_Parties_PtysSubGrp = convert__model_to_full_PtysSubGrp rec_in.mod_f_Parties_PtysSubGrp
    } and 
convert__model_to_full_Parties (rec_in : model_fix_rec_parties)  =
    let d = []
    in
    let d = (match rec_in.rg_Parties_element_0 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_Parties_element_1 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_Parties_element_2 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_Parties_element_3 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    let d = (match rec_in.rg_Parties_element_4 with
        | None -> d
        | Some x -> (x :: d)
    )
    in
    map_convert__model_to_full_RG_Parties d (cap_length d 0 5) []
;;

let rec convert__full_to_model_Parties (rec_in : fix_rg_parties)  =
    let block4 = None
    in
    let block3 = None
    in
    let block2 = None
    in
    let block1 = None
    in
    let block0 = None
    in
    let t = rec_in
    in
    let t = t.f_Parties_entries
    in
    (match t with
        | [] -> (Rg_success_parties {
            rg_Parties_element_4 = block4;
            rg_Parties_element_3 = block3;
            rg_Parties_element_2 = block2;
            rg_Parties_element_1 = block1;
            rg_Parties_element_0 = block0
        })
        | h :: t -> ((match convert__full_to_model_RG_Parties h with
            | Rg_inner_success_parties x -> let block0 = Some x
            in
            (match t with
                | [] -> (Rg_success_parties {
                    rg_Parties_element_4 = block4;
                    rg_Parties_element_3 = block3;
                    rg_Parties_element_2 = block2;
                    rg_Parties_element_1 = block1;
                    rg_Parties_element_0 = block0
                })
                | h :: t -> ((match convert__full_to_model_RG_Parties h with
                    | Rg_inner_success_parties x -> let block1 = Some x
                    in
                    (match t with
                        | [] -> (Rg_success_parties {
                            rg_Parties_element_4 = block4;
                            rg_Parties_element_3 = block3;
                            rg_Parties_element_2 = block2;
                            rg_Parties_element_1 = block1;
                            rg_Parties_element_0 = block0
                        })
                        | h :: t -> ((match convert__full_to_model_RG_Parties h with
                            | Rg_inner_success_parties x -> let block2 = Some x
                            in
                            (match t with
                                | [] -> (Rg_success_parties {
                                    rg_Parties_element_4 = block4;
                                    rg_Parties_element_3 = block3;
                                    rg_Parties_element_2 = block2;
                                    rg_Parties_element_1 = block1;
                                    rg_Parties_element_0 = block0
                                })
                                | h :: t -> ((match convert__full_to_model_RG_Parties h with
                                    | Rg_inner_success_parties x -> let block3 = Some x
                                    in
                                    (match t with
                                        | [] -> (Rg_success_parties {
                                            rg_Parties_element_4 = block4;
                                            rg_Parties_element_3 = block3;
                                            rg_Parties_element_2 = block2;
                                            rg_Parties_element_1 = block1;
                                            rg_Parties_element_0 = block0
                                        })
                                        | h :: _t -> ((match convert__full_to_model_RG_Parties h with
                                            | Rg_inner_success_parties x -> let block4 = Some x
                                            in
                                            Rg_success_parties {
                                                rg_Parties_element_4 = block4;
                                                rg_Parties_element_3 = block3;
                                                rg_Parties_element_2 = block2;
                                                rg_Parties_element_1 = block1;
                                                rg_Parties_element_0 = block0
                                            }
                                            | Rg_inner_invalid_enum_failure_parties x -> (Rg_invalid_enum_failure_parties ((x)))
                                            | Rg_inner_missing_field_failure_parties x -> (Rg_missing_field_failure_parties ((x)))
                                        )
                                        )
                                    )
                                    | Rg_inner_invalid_enum_failure_parties x -> (Rg_invalid_enum_failure_parties ((x)))
                                    | Rg_inner_missing_field_failure_parties x -> (Rg_missing_field_failure_parties ((x)))
                                )
                                )
                            )
                            | Rg_inner_invalid_enum_failure_parties x -> (Rg_invalid_enum_failure_parties ((x)))
                            | Rg_inner_missing_field_failure_parties x -> (Rg_missing_field_failure_parties ((x)))
                        )
                        )
                    )
                    | Rg_inner_invalid_enum_failure_parties x -> (Rg_invalid_enum_failure_parties ((x)))
                    | Rg_inner_missing_field_failure_parties x -> (Rg_missing_field_failure_parties ((x)))
                )
                )
            )
            | Rg_inner_invalid_enum_failure_parties x -> (Rg_invalid_enum_failure_parties ((x)))
            | Rg_inner_missing_field_failure_parties x -> (Rg_missing_field_failure_parties ((x)))
        )
        )
    ) and 
convert__full_to_model_RG_Parties (rec_in : fix_rg_inner_parties)  =
    (match convert__full_to_model_PtysSubGrp rec_in.f_Parties_PtysSubGrp with
        | Rg_success_ptyssubgrp x -> let c_mod_f_Parties_PtysSubGrp = x
        in
        (match rec_in.f_Parties_PartyIndex with
            | Some x -> let c_mod_f_Parties_PartyIndex = x
            in
            (match rec_in.f_Parties_PartyID with
                | Some x -> let c_mod_f_Parties_PartyID = x
                in
                Rg_inner_success_parties {
                    mod_f_Parties_PartyID = c_mod_f_Parties_PartyID;
                    mod_f_Parties_PartyIndex = c_mod_f_Parties_PartyIndex;
                    mod_f_Parties_PtysSubGrp = c_mod_f_Parties_PtysSubGrp
                }
                | None -> (Rg_inner_missing_field_failure_parties (M_Field_PartyID_Tag,(M_RG_Parties_Tag)))
            )
            | None -> (Rg_inner_missing_field_failure_parties (M_Field_PartyIndex_Tag,(M_RG_Parties_Tag)))
        )
        | Rg_invalid_enum_failure_ptyssubgrp x -> (Rg_inner_invalid_enum_failure_parties x)
        | Rg_missing_field_failure_ptyssubgrp x -> (Rg_inner_missing_field_failure_parties x)
    )
;;

