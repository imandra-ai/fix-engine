(* Imandra Inc. copyright 2022 *)
[@@@program]
[@@@import "../src-model/src-types/model_app_enums.iml"]
open Model_app_enums;;
[@@@require "yojson"]
open Yojson.Basic;;


let execinst_to_string (d)  =
    (match d with
        | FIX_ExecInst_NotHeld -> "NotHeld"
        | FIX_ExecInst_Work -> "Work"
        | FIX_ExecInst_GoAlong -> "GoAlong"
        | FIX_ExecInst_OverTheDay -> "OverTheDay"
        | FIX_ExecInst_Held -> "Held"
        | FIX_ExecInst_ParticipateDoNotInitiate -> "ParticipateDoNotInitiate"
        | FIX_ExecInst_StrictScale -> "StrictScale"
        | FIX_ExecInst_TryToScale -> "TryToScale"
        | FIX_ExecInst_StayOnBidSide -> "StayOnBidSide"
        | FIX_ExecInst_StayOnOfferSide -> "StayOnOfferSide"
        | FIX_ExecInst_NoCross -> "NoCross"
        | FIX_ExecInst_OKToCross -> "OKToCross"
        | FIX_ExecInst_CallFirst -> "CallFirst"
        | FIX_ExecInst_PercentOfVolume -> "PercentOfVolume"
        | FIX_ExecInst_DoNotIncrease -> "DoNotIncrease"
        | FIX_ExecInst_DoNotReduce -> "DoNotReduce"
        | FIX_ExecInst_AllOrNone -> "AllOrNone"
        | FIX_ExecInst_ReinstateOnSystemFailure -> "ReinstateOnSystemFailure"
        | FIX_ExecInst_InstitutionsOnly -> "InstitutionsOnly"
        | FIX_ExecInst_ReinstateOnTradingHalt -> "ReinstateOnTradingHalt"
        | FIX_ExecInst_CancelOnTradingHalt -> "CancelOnTradingHalt"
        | FIX_ExecInst_LastPeg -> "LastPeg"
        | FIX_ExecInst_MidPricePeg -> "MidPricePeg"
        | FIX_ExecInst_NonNegotiable -> "NonNegotiable"
        | FIX_ExecInst_OpeningPeg -> "OpeningPeg"
        | FIX_ExecInst_MarketPeg -> "MarketPeg"
        | FIX_ExecInst_CancelOnSystemFailure -> "CancelOnSystemFailure"
        | FIX_ExecInst_PrimaryPeg -> "PrimaryPeg"
        | FIX_ExecInst_Suspend -> "Suspend"
        | FIX_ExecInst_CustomerDisplayInstruction -> "CustomerDisplayInstruction"
        | FIX_ExecInst_Netting -> "Netting"
        | FIX_ExecInst_PegToVWAP -> "PegToVWAP"
        | FIX_ExecInst_TradeAlong -> "TradeAlong"
        | FIX_ExecInst_TryToStop -> "TryToStop"
        | FIX_ExecInst_CancelIfNotBest -> "CancelIfNotBest"
        | FIX_ExecInst_TrailingStopPeg -> "TrailingStopPeg"
        | FIX_ExecInst_StrictLimit -> "StrictLimit"
        | FIX_ExecInst_IgnorePriceValidityChecks -> "IgnorePriceValidityChecks"
        | FIX_ExecInst_PegToLimitPrice -> "PegToLimitPrice"
        | FIX_ExecInst_WorkToTargetStrategy -> "WorkToTargetStrategy"
    )
;;

let exectype_to_string (d)  =
    (match d with
        | FIX_ExecType_New -> "New"
        | FIX_ExecType_DoneForDay -> "DoneForDay"
        | FIX_ExecType_Canceled -> "Canceled"
        | FIX_ExecType_Replaced -> "Replaced"
        | FIX_ExecType_PendingCancel -> "PendingCancel"
        | FIX_ExecType_Stopped -> "Stopped"
        | FIX_ExecType_Rejected -> "Rejected"
        | FIX_ExecType_Suspended -> "Suspended"
        | FIX_ExecType_PendingNew -> "PendingNew"
        | FIX_ExecType_Calculated -> "Calculated"
        | FIX_ExecType_Expired -> "Expired"
        | FIX_ExecType_Restated -> "Restated"
        | FIX_ExecType_PendingReplace -> "PendingReplace"
        | FIX_ExecType_Trade -> "Trade"
        | FIX_ExecType_TradeCorrect -> "TradeCorrect"
        | FIX_ExecType_TradeCancel -> "TradeCancel"
        | FIX_ExecType_OrderStatus -> "OrderStatus"
    )
;;

let ordstatus_to_string (d)  =
    (match d with
        | FIX_OrdStatus_New -> "New"
        | FIX_OrdStatus_PartiallyFilled -> "PartiallyFilled"
        | FIX_OrdStatus_Filled -> "Filled"
        | FIX_OrdStatus_DoneForDay -> "DoneForDay"
        | FIX_OrdStatus_Canceled -> "Canceled"
        | FIX_OrdStatus_PendingCancel -> "PendingCancel"
        | FIX_OrdStatus_Stopped -> "Stopped"
        | FIX_OrdStatus_Rejected -> "Rejected"
        | FIX_OrdStatus_Suspended -> "Suspended"
        | FIX_OrdStatus_PendingNew -> "PendingNew"
        | FIX_OrdStatus_Calculated -> "Calculated"
        | FIX_OrdStatus_Expired -> "Expired"
        | FIX_OrdStatus_AcceptedForBidding -> "AcceptedForBidding"
        | FIX_OrdStatus_PendingReplace -> "PendingReplace"
        | FIX_OrdStatus_Replaced -> "Replaced"
    )
;;

let ordtype_to_string (d)  =
    (match d with
        | FIX_OrdType_Market -> "Market"
        | FIX_OrdType_Limit -> "Limit"
        | FIX_OrdType_Stop -> "Stop"
        | FIX_OrdType_StopLimit -> "StopLimit"
        | FIX_OrdType_WithOrWithout -> "WithOrWithout"
        | FIX_OrdType_LimitOrBetter -> "LimitOrBetter"
        | FIX_OrdType_LimitWithOrWithout -> "LimitWithOrWithout"
        | FIX_OrdType_OnBasis -> "OnBasis"
        | FIX_OrdType_PreviouslyQuoted -> "PreviouslyQuoted"
        | FIX_OrdType_PreviouslyIndicated -> "PreviouslyIndicated"
        | FIX_OrdType_ForexSwap -> "ForexSwap"
        | FIX_OrdType_Funari -> "Funari"
        | FIX_OrdType_MarketIfTouched -> "MarketIfTouched"
        | FIX_OrdType_MarketWithLeftOverAsLimit -> "MarketWithLeftOverAsLimit"
        | FIX_OrdType_PreviousFundValuationPoint -> "PreviousFundValuationPoint"
        | FIX_OrdType_NextFundValuationPoint -> "NextFundValuationPoint"
        | FIX_OrdType_Pegged -> "Pegged"
        | FIX_OrdType_StopSpread -> "StopSpread"
    )
;;

let partysubidtype_to_string (d)  =
    (match d with
        | FIX_PartySubIDType_Firm -> "Firm"
        | FIX_PartySubIDType_Person -> "Person"
        | FIX_PartySubIDType_System -> "System"
        | FIX_PartySubIDType_Application -> "Application"
        | FIX_PartySubIDType_FullLegalNameOfFirm -> "FullLegalNameOfFirm"
        | FIX_PartySubIDType_PostalAddress -> "PostalAddress"
        | FIX_PartySubIDType_PhoneNumber -> "PhoneNumber"
        | FIX_PartySubIDType_EmailAddress -> "EmailAddress"
        | FIX_PartySubIDType_ContactName -> "ContactName"
        | FIX_PartySubIDType_SecuritiesAccountNumber -> "SecuritiesAccountNumber"
        | FIX_PartySubIDType_RegistrationNumber -> "RegistrationNumber"
        | FIX_PartySubIDType_RegisteredAddressForConfirmation -> "RegisteredAddressForConfirmation"
        | FIX_PartySubIDType_RegulatoryStatus -> "RegulatoryStatus"
        | FIX_PartySubIDType_RegistrationName -> "RegistrationName"
        | FIX_PartySubIDType_CashAccountNumber -> "CashAccountNumber"
        | FIX_PartySubIDType_BIC -> "BIC"
        | FIX_PartySubIDType_CSDParticipantMemberCode -> "CSDParticipantMemberCode"
        | FIX_PartySubIDType_RegisteredAddress -> "RegisteredAddress"
        | FIX_PartySubIDType_FundAccountName -> "FundAccountName"
        | FIX_PartySubIDType_TelexNumber -> "TelexNumber"
        | FIX_PartySubIDType_FaxNumber -> "FaxNumber"
        | FIX_PartySubIDType_SecuritiesAccountName -> "SecuritiesAccountName"
        | FIX_PartySubIDType_CashAccountName -> "CashAccountName"
        | FIX_PartySubIDType_Department -> "Department"
        | FIX_PartySubIDType_LocationDesk -> "LocationDesk"
        | FIX_PartySubIDType_PositionAccountType -> "PositionAccountType"
    )
;;

let side_to_string (d)  =
    (match d with
        | FIX_Side_Buy -> "Buy"
        | FIX_Side_Sell -> "Sell"
        | FIX_Side_BuyMinus -> "BuyMinus"
        | FIX_Side_SellPlus -> "SellPlus"
        | FIX_Side_SellShort -> "SellShort"
        | FIX_Side_SellShortExempt -> "SellShortExempt"
        | FIX_Side_Undisclosed -> "Undisclosed"
        | FIX_Side_Cross -> "Cross"
        | FIX_Side_CrossShort -> "CrossShort"
        | FIX_Side_CrossShortExempt -> "CrossShortExempt"
        | FIX_Side_AsDefined -> "AsDefined"
        | FIX_Side_Opposite -> "Opposite"
        | FIX_Side_Subscribe -> "Subscribe"
        | FIX_Side_Redeem -> "Redeem"
        | FIX_Side_Lend -> "Lend"
        | FIX_Side_Borrow -> "Borrow"
    )
;;

let execinst_to_json (d)  : Yojson.Basic.t =
    `List (List.map (fun x -> 
    (match x with
        | Ok x -> (`Assoc ([(("Ok",`String (execinst_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
    ) d)
;;

let exectype_to_json (d)  : Yojson.Basic.t =
    (match d with
        | Ok x -> (`Assoc ([(("Ok",`String (exectype_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
;;

let ordstatus_to_json (d)  : Yojson.Basic.t =
    (match d with
        | Ok x -> (`Assoc ([(("Ok",`String (ordstatus_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
;;

let ordtype_to_json (d)  : Yojson.Basic.t =
    (match d with
        | Ok x -> (`Assoc ([(("Ok",`String (ordtype_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
;;

let partysubidtype_to_json (d)  : Yojson.Basic.t =
    (match d with
        | Ok x -> (`Assoc ([(("Ok",`String (partysubidtype_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
;;

let side_to_json (d)  : Yojson.Basic.t =
    (match d with
        | Ok x -> (`Assoc ([(("Ok",`String (side_to_string x)))]))
        | Error s -> (`Assoc ([(("Error",`String s))]))
    )
;;

let execinst_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (execinst_to_json d)
    )
;;

let exectype_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (exectype_to_json d)
    )
;;

let ordstatus_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (ordstatus_to_json d)
    )
;;

let ordtype_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (ordtype_to_json d)
    )
;;

let partysubidtype_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (partysubidtype_to_json d)
    )
;;

let side_opt_to_json (d)  : Yojson.Basic.t =
    (match d with
        | None -> ((`Null))
        | Some d -> (side_to_json d)
    )
;;

[@@@logic]
