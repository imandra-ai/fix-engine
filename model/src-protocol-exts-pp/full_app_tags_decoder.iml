(* Imandra Inc. copyright 2022 *)
[@@@program]
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode.Infix;;
[@@@import "../src-protocol-exts/full_app_tags.iml"]
open Full_app_tags;;


let full_app_string_to_msg_tag (tag)  =
    (match tag with
        | "NewOrderSingle" -> (Some Full_Msg_NewOrderSingle_Tag)
        | "ExecutionReport" -> (Some Full_Msg_ExecutionReport_Tag)
        | _ -> ((None))
    )
;;

let full_app_string_to_field_tag (tag)  =
    (match tag with
        | "ClOrdID" -> (Some Full_Field_ClOrdID_Tag)
        | "Account" -> (Some Full_Field_Account_Tag)
        | "ExecInst" -> (Some Full_Field_ExecInst_Tag)
        | "Side" -> (Some Full_Field_Side_Tag)
        | "TransactTime" -> (Some Full_Field_TransactTime_Tag)
        | "OrdType" -> (Some Full_Field_OrdType_Tag)
        | "Price" -> (Some Full_Field_Price_Tag)
        | "SpreadProportion" -> (Some Full_Field_SpreadProportion_Tag)
        | "OrderID" -> (Some Full_Field_OrderID_Tag)
        | "ExecID" -> (Some Full_Field_ExecID_Tag)
        | "ExecType" -> (Some Full_Field_ExecType_Tag)
        | "OrdStatus" -> (Some Full_Field_OrdStatus_Tag)
        | "LeavesQty" -> (Some Full_Field_LeavesQty_Tag)
        | "CumQty" -> (Some Full_Field_CumQty_Tag)
        | "Text" -> (Some Full_Field_Text_Tag)
        | "OrderQty" -> (Some Full_Field_OrderQty_Tag)
        | "NoPartySubIDs" -> (Some Full_Field_NoPartySubIDs_Tag)
        | "PartySubID" -> (Some Full_Field_PartySubID_Tag)
        | "NoPartyIDs" -> (Some Full_Field_NoPartyIDs_Tag)
        | "PartyID" -> (Some Full_Field_PartyID_Tag)
        | "PartyIndex" -> (Some Full_Field_PartyIndex_Tag)
        | _ -> ((None))
    )
;;

let full_app_msg_tag_of_json  : full_app_msg_tag decoder =
    string >>= (fun x -> 
    (match full_app_string_to_msg_tag x with
        | None -> (fail ("Unknown Tag: "^x))
        | Some x -> (succeed x)
    )
    )
;;

let full_app_msg_tag_opt_of_json  : full_app_msg_tag option decoder =
    (maybe string) >>= (fun x -> 
    (match x with
        | None -> (succeed None)
        | Some x -> (succeed (full_app_string_to_msg_tag x))
    )
    )
;;

let full_app_field_tag_of_json  : full_app_field_tag decoder =
    string >>= (fun x -> 
    (match full_app_string_to_field_tag x with
        | None -> (fail ("Unknown Tag: "^x))
        | Some x -> (succeed x)
    )
    )
;;

let full_app_field_tag_opt_of_json  : full_app_field_tag option decoder =
    (maybe string) >>= (fun x -> 
    (match x with
        | None -> (succeed None)
        | Some x -> (succeed (full_app_string_to_field_tag x))
    )
    )
;;

[@@@logic]
