(* Imandra Inc. copyright 2022 *)
[@@@program]
[@@@import "../../src-core-pp/base_types_json.iml"]
open Base_types_json;;
[@@@import "../../src-core/datetime.iml"]
open Datetime;;
[@@@import "../../src-core-pp/datetime_json.iml"]
open Datetime_json;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode;;
[@@@require "decoders-yojson"]
open Decoders_yojson.Basic.Decode.Infix;;
[@@@import "json_to_enum.iml"]
open Json_to_enum;;
[@@@import "json_to_repeating_group.iml"]
open Json_to_repeating_group;;
[@@@import "../src-types/model_app_enums.iml"]
open Model_app_enums;;
[@@@import "../src-types/model_repeating_groups.iml"]
open Model_repeating_groups;;
[@@@import "../../src-core/numeric.iml"]
open Numeric;;
[@@@import "../src-types/state.iml"]
open State;;
[@@@import "../../src-core-time-defaults/time_defaults.iml"]
open Time_defaults;;


let internal_state_decoder  : fix_internal_state decoder =
    (field "state.ExecType" mod_enum_exectype_decoder) >>= (fun mod_f_internal_state_ExecType -> 
    (field "state.OrderID" lstring_decoder) >>= (fun mod_f_internal_state_OrderID -> 
    (field "state.ExecInst" mod_enum_execinst_decoder) >>= (fun mod_f_internal_state_ExecInst -> 
    (field "state.Parties" mod_rg_parties_decoder) >>= (fun mod_f_internal_state_Parties -> 
    (field_opt "state.SpreadProportion" float_decoder) >>= (fun mod_f_internal_state_SpreadProportion -> 
    (field "state.CumQty" float_6_decoder) >>= (fun mod_f_internal_state_CumQty -> 
    (field "state.LeavesQty" float_6_decoder) >>= (fun mod_f_internal_state_LeavesQty -> 
    (field "state.OrdType" mod_enum_ordtype_decoder) >>= (fun mod_f_internal_state_OrdType -> 
    (field "state.OrdStatus" mod_enum_ordstatus_decoder) >>= (fun mod_f_internal_state_OrdStatus -> 
    (field "state.OrderQtyData.OrderQty" float_6_decoder) >>= (fun mod_f_internal_state_OrderQtyData_OrderQty -> 
    (field_opt "state.Price" float_2_decoder) >>= (fun mod_f_internal_state_Price -> 
    (field "state.Side" mod_enum_side_decoder) >>= (fun mod_f_internal_state_Side -> 
    (field "state.bestAsk" float_2_decoder) >>= (fun mod_f_internal_state_bestAsk -> 
    (field "state.bestBid" float_2_decoder) >>= (fun mod_f_internal_state_bestBid -> 
    (field "state.AvgPx" float_decoder) >>= (fun mod_f_internal_state_AvgPx -> 
    (field "state.live_order" bool_decoder) >>= (fun mod_f_internal_state_live_order -> 
    succeed {
        mod_f_internal_state_live_order = mod_f_internal_state_live_order;
        mod_f_internal_state_AvgPx = mod_f_internal_state_AvgPx;
        mod_f_internal_state_bestBid = mod_f_internal_state_bestBid;
        mod_f_internal_state_bestAsk = mod_f_internal_state_bestAsk;
        mod_f_internal_state_Side = mod_f_internal_state_Side;
        mod_f_internal_state_Price = mod_f_internal_state_Price;
        mod_f_internal_state_OrderQtyData_OrderQty = mod_f_internal_state_OrderQtyData_OrderQty;
        mod_f_internal_state_OrdStatus = mod_f_internal_state_OrdStatus;
        mod_f_internal_state_OrdType = mod_f_internal_state_OrdType;
        mod_f_internal_state_LeavesQty = mod_f_internal_state_LeavesQty;
        mod_f_internal_state_CumQty = mod_f_internal_state_CumQty;
        mod_f_internal_state_SpreadProportion = mod_f_internal_state_SpreadProportion;
        mod_f_internal_state_Parties = mod_f_internal_state_Parties;
        mod_f_internal_state_ExecInst = mod_f_internal_state_ExecInst;
        mod_f_internal_state_OrderID = mod_f_internal_state_OrderID;
        mod_f_internal_state_ExecType = mod_f_internal_state_ExecType
    }
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
    )
;;

let internal_fresh_state'_decoder  : fix_internal_fresh_state' decoder =
    (field "fresh_state'.seed_string" lstring_decoder) >>= (fun mod_f_internal_fresh_state'_seed_string -> 
    succeed {
        mod_f_internal_fresh_state'_seed_string = mod_f_internal_fresh_state'_seed_string
    }
    )
;;

[@@@logic]
