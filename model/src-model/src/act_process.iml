(* Imandra Inc. copyright 2022 *)
[@@@import "act_checks.iml"]
open Act_checks;;
[@@@import "../src-types/actions.iml"]
open Actions;;
[@@@import "../../src-core/datetime.iml"]
open Datetime;;
[@@@import "ipl_functions.iml"]
open Ipl_functions;;
[@@@import "../src-types/model_app_enums.iml"]
open Model_app_enums;;
[@@@import "../src-types/model_messages.iml"]
open Model_messages;;
[@@@import "../src-types/model_records.iml"]
open Model_records;;
[@@@import "../../src-core/numeric.iml"]
open Numeric;;
[@@@import "../src-types/state.iml"]
open State;;
[@@@import "../../src-core-time-defaults/time_defaults.iml"]
open Time_defaults;;


let receive_action_fill (m_state : model_state) (action_data : m_action_fix_fill)  =
    let local_internal_fresh_state' = m_state.f_internal_fresh_state'
    in
    let local_internal_state = m_state.f_internal_state
    in
    let local_internal_state = { local_internal_state with
        mod_f_internal_state_LeavesQty = float_Sub_6_6 local_internal_state.mod_f_internal_state_LeavesQty action_data.mod_f_fill_fill_qty
    }
    in
    let local_internal_state = { local_internal_state with
        mod_f_internal_state_AvgPx = float_Div_6_6 (float_Add_6_6 (float_Mult_6_6 local_internal_state.mod_f_internal_state_AvgPx local_internal_state.mod_f_internal_state_CumQty) (float_Mult_6_2 action_data.mod_f_fill_fill_qty action_data.mod_f_fill_fill_price)) (float_Add_6_6 action_data.mod_f_fill_fill_qty local_internal_state.mod_f_internal_state_CumQty)
    }
    in
    let local_internal_state = { local_internal_state with
        mod_f_internal_state_CumQty = float_Add_6_6 local_internal_state.mod_f_internal_state_CumQty action_data.mod_f_fill_fill_qty
    }
    in
    let (local_internal_state) = (if ((=) local_internal_state.mod_f_internal_state_LeavesQty (float_Create_6 (0))) then
        let local_internal_state = { local_internal_state with
            mod_f_internal_state_OrdStatus = FIX_OrdStatus_Filled
        }
        in
        let local_internal_state = { local_internal_state with
            mod_f_internal_state_ExecType = FIX_ExecType_Trade
        }
        in
        (local_internal_state)
    else
        let local_internal_state = { local_internal_state with
            mod_f_internal_state_OrdStatus = FIX_OrdStatus_PartiallyFilled
        }
        in
        let local_internal_state = { local_internal_state with
            mod_f_internal_state_ExecType = FIX_ExecType_Trade
        }
        in
        (local_internal_state)
        )
    in
    let local_internal_fresh_state' = {
        mod_f_internal_fresh_state'_seed_string = model_func_fresh_string' local_internal_fresh_state'.mod_f_internal_fresh_state'_seed_string
    }
    in
    let local_0fresh = local_internal_fresh_state'.mod_f_internal_fresh_state'_seed_string
    in
    let msg_data_inner = {
        mod_f_ExecutionReport_CumQty = local_internal_state.mod_f_internal_state_CumQty;
        mod_f_ExecutionReport_ExecID = local_0fresh;
        mod_f_ExecutionReport_ExecInst = local_internal_state.mod_f_internal_state_ExecInst;
        mod_f_ExecutionReport_ExecType = local_internal_state.mod_f_internal_state_ExecType;
        mod_f_ExecutionReport_LeavesQty = local_internal_state.mod_f_internal_state_LeavesQty;
        mod_f_ExecutionReport_OrdStatus = local_internal_state.mod_f_internal_state_OrdStatus;
        mod_f_ExecutionReport_OrderID = local_internal_state.mod_f_internal_state_OrderID;
        mod_f_ExecutionReport_OrderQtyData_OrderQty = local_internal_state.mod_f_internal_state_OrderQtyData_OrderQty;
        mod_f_ExecutionReport_Parties = local_internal_state.mod_f_internal_state_Parties;
        mod_f_ExecutionReport_Side = local_internal_state.mod_f_internal_state_Side;
        mod_f_ExecutionReport_Text = None
    }
    in
    let m_state = send_msg (FIX_Msg_ExecutionReport msg_data_inner) m_state
    in
    { m_state with
        f_internal_state = local_internal_state;
        f_internal_fresh_state' = local_internal_fresh_state'
    }
;;

let receive_action_bookState (m_state : model_state) (action_data : m_action_fix_bookstate)  =
    let local_internal_state = m_state.f_internal_state
    in
    let local_internal_state = { local_internal_state with
        mod_f_internal_state_bestBid = action_data.mod_f_bookState_bestBid
    }
    in
    let local_internal_state = { local_internal_state with
        mod_f_internal_state_bestAsk = action_data.mod_f_bookState_bestAsk
    }
    in
    let local_spread = float_Convert_2_6 (float_Div_2_2 (float_Sub_2_2 local_internal_state.mod_f_internal_state_bestAsk local_internal_state.mod_f_internal_state_bestBid) local_internal_state.mod_f_internal_state_bestAsk)
    in
    let (local_internal_state) = (if ((&&) ((match local_internal_state.mod_f_internal_state_SpreadProportion with
        | Some cap_x -> (float_GreaterThanEqual_6_6 cap_x local_spread)
        | None -> false
    )
    ) ((=) local_internal_state.mod_f_internal_state_OrdStatus FIX_OrdStatus_PendingNew)) then
        let local_internal_state = { local_internal_state with
            mod_f_internal_state_OrdStatus = FIX_OrdStatus_New
        }
        in
        (local_internal_state)
    else
        (local_internal_state))
    in
    { m_state with
        f_internal_state = local_internal_state
    }
;;

let receive_action (m_state : model_state) (action : fix_action)  =
    (if (is_action_valid action m_state) then
        ((match action with
            | FIX_Action_fill d -> (receive_action_fill m_state d)
            | FIX_Action_bookState d -> (receive_action_bookState m_state d)
        )
        )
    else
        m_state)
;;

