[@@@require "lwt"]

[@@@require "lwt.unix"]

[@@@require "cmdliner"]

[@@@import "config_parser.iml"]

[@@@import "../src-core-time-defaults-pp/time_defaults_current_time.iml"]

[@@@import "../src-core-time-defaults/time_defaults.iml"]

[@@@import "../src-core-time-defaults-pp/time_defaults_parser.iml"]

[@@@import "../src-core-pp/encode_base_types.iml"]

[@@@import "../src-protocol-pp/encode_full_messages.iml"]

[@@@import "../src-protocol/full_message_tags.iml"]

[@@@import "../src-core-pp/parser_utils.iml"]

[@@@import "../src-protocol-pp/parse_full_tags.iml"]

[@@@import "../src-protocol-pp/full_admin_tags_json.iml"]

[@@@import "../src-protocol-exts-pp/full_app_tags_json.iml"]

[@@@import "../src-simulation-utils/message_stream.iml"]

[@@@program]

open Config_parser

let ( >>= ) = Lwt.( >>= )

let get_current_utctimestamp ?offset () =
  let ts = Current_time.get_current_utctimestamp_micro () in
  match offset with
  | None ->
      ts
  | Some offset ->
      let dt = Datetime.make_duration 0 0 0 0 0 offset in
      Datetime.utctimestamp_milli_duration_Add ts dt


let msg_to_string msg =
  msg
  |> List.map (fun (a, b) -> a ^ "=" ^ b)
  |> List.fold_left (fun a s -> a ^ s ^ "\001") ""


let prepare_packet msg =
  let msg_body =
    msg
    |> List.filter (function "8", _ | "9", _ | "10", _ -> false | _ -> true)
  in
  (* Getting current values from the mesage *)
  let begin_string = try Caml.List.assoc "8" msg with _ -> "FIX.4.4" in
  let body_length = try Caml.List.assoc "9" msg with _ -> "0" in
  let checksum = try Caml.List.assoc "10" msg with _ -> "0" in
  (* Computing body length if zero *)
  let body_length =
    match body_length with
    | "0" ->
        Encode_full_messages.get_body_length msg_body
        |> Encode_base_types.encode_int
    | _ ->
        body_length
  in
  let msg = [ ("8", begin_string); ("9", body_length) ] @ msg_body in
  (* Computing checksum if zero *)
  let checksum =
    match checksum with
    | "0" ->
        Encode_full_messages.get_checksum msg
        |> fun x -> Printf.sprintf "%03u" (Z.to_int x)
    | _ ->
        checksum
  in
  msg @ [ ("10", checksum) ]


let prepare_message msg (src, tagret) =
  let id x = x in
  let time = get_current_utctimestamp () in
  let fill_placeholder (k, v) =
    if String.length v < 5
    then (k, v)
    else if match String.sub v 0 5 with None -> true | Some x -> x <> "<TIME"
    then (k, v)
    else
      let adds = Scanf.sscanf v "<TIME%s@>" id in
      let adds =
        if adds = "" then 0 else Z.of_int (Scanf.sscanf adds "%d" id)
      in
      let time = get_current_utctimestamp ~offset:adds () in
      (k, Encode_datetime.encode_UTCTimestamp_micro time)
  in
  let fill_empty_ts (k, v) =
    if v <> "00000000-00:00:00.000"
    then (k, v)
    else (k, Encode_datetime.encode_UTCTimestamp_micro time)
  in
  let set_comp_ids = function
    | "49", _ ->
        ("49", src)
    | "56", _ ->
        ("56", tagret)
    | k, v ->
        (k, v)
  in
  msg
  |> List.map fill_placeholder
  |> List.map fill_empty_ts
  |> List.map set_comp_ids
  |> prepare_packet
  |> msg_to_string


let check_expected_compatible received expected =
  let parse_UTCTimestamp = Parse_datetime.parse_UTCTimestamp_micro in
  if not (List.mem_assoc "35" received)
  then Lwt_io.printf "  Error: received message doesn't have \"35\" key.\n"
  else
    let rv, ev = (List.assoc "35" received, List.assoc "35" expected) in
    let rv_x = match rv with None -> "" | Some rv_x -> rv_x in
    let ev_x = match ev with None -> "" | Some ev_x -> ev_x in
    if rv_x <> ev_x
    then
      Lwt_io.printf
        "  Error: received a wrong message type \"%s\" instead of expected \
         \"%s\".\n"
        rv_x
        ev_x
    else
      expected
      |> Lwt_list.iter_s (fun (ek, ev) ->
             if ek = "9" || ek = "10"
             then Lwt.return_unit
             else if ek = "58"
             then Lwt.return_unit
             else if (* NOTE: Ignoring Text<58> tag for now *)
                     not (List.mem_assoc ek received)
             then
               Lwt_io.printf
                 "  Error: expected key \"%s\" not present in the received \
                  message.\n"
                 ek
             else
               let rv = Caml.List.assoc ek received in
               if rv = ev
               then Lwt.return_unit
               else
                 match (parse_UTCTimestamp rv, parse_UTCTimestamp ev) with
                 | Some _rt, Some _et ->
                     Lwt.return_unit
                 | _, _ ->
                     Lwt_io.printf
                       "  Error: for the key \"%s\" expected value was \"%s\", \
                        got \"%s\" instead.\n"
                       ek
                       ev
                       rv )
      >>= fun () ->
      received
      |> Lwt_list.iter_s (fun (rk, _rv) ->
             if not (List.mem_assoc rk expected)
             then
               Lwt_io.printf
                 "  Error: received a key \"%s\" not present in the expected \
                  message.\n"
                 rk
             else Lwt.return_unit )


let get_type_and_seqnum msg =
  let msgtype =
    try
      let msgtype = Caml.List.assoc "35" msg in
      match Parse_full_tags.parse_full_msg_tag msgtype with
      | None ->
          "?"
      | Some (Full_message_tags.Full_Admin_Msg_Tag tag) ->
          Full_admin_tags_json.full_admin_msg_tag_to_string tag
      | Some (Full_message_tags.Full_App_Msg_Tag tag) ->
          tag
    with
    | _ ->
        "?"
  in
  let seqnum = try Caml.List.assoc "34" msg with _ -> "?" in
  (msgtype, seqnum)


let perform_action (instream, outch) act =
  ( match act with
  | InitiateMessage msg ->
      let msgtype, seqnum = get_type_and_seqnum msg in
      let msg = prepare_message msg ("TEST_CLIENT", "TEST_SERVER") in
      Lwt_io.write outch msg
      >>= fun () ->
      Lwt_io.flush outch
      >>= fun () ->
      let logstring =
        "Initiated #" ^ seqnum ^ " \"" ^ msgtype ^ "\"  (" ^ msg ^ ")"
      in
      Lwt_io.printl logstring
  | ExpectMessage msg ->
      let msg = prepare_message msg ("TEST_SERVER", "TEST_CLIENT") in
      Lwt_io.printl ("Expecting: " ^ msg)
      >>= fun () ->
      Lwt_stream.next instream
      >>= fun rmsg ->
      Lwt_io.printl ("Received: " ^ msg_to_string rmsg)
      >>= fun () ->
      msg
      |> Stream.of_string
      |> Parser_utils.split_into_key_value '\001'
      |> Parser_utils.split_into_messages
      |> Stream.next
      |> check_expected_compatible rmsg
  | ExpectAction Disconnect ->
      Lwt_io.printl "Disconnecting"
      >>= fun () -> Lwt_io.close outch >>= fun () -> Lwt.return_unit
  | _ ->
      Lwt_io.printl "Unexpected action."
      >>= fun () -> Lwt_io.close outch >>= fun () -> Lwt.return_unit )
  >>= fun () -> Lwt_unix.sleep 0.1p


let setup_client msgs =
  let addr = Caml_unix.(ADDR_INET (inet_addr_loopback, 9880i)) in
  Lwt.catch
    (fun () ->
      Lwt_io.printl "Starting connection"
      >>= fun () ->
      let fd = Lwt_unix.(socket PF_INET SOCK_STREAM 0i) in
      Lwt_io.with_connection ~fd addr (fun (inch, outch) ->
          Lwt_io.printl "Connnected to localhost:9880 ..."
          >>= fun () ->
          let instream = Message_stream.from_channel inch in
          let perform_action = perform_action (instream, outch) in
          Lwt_list.iter_s perform_action msgs ) )
    (fun _x ->
      Lwt_io.printl "Unhandled exception" >>= fun () -> Lwt_io.flush_all () )


let def_reader filename =
  (let config_actions = parse_file filename in
   let rec scan = function
     | InitiateAction Connect :: tl ->
         setup_client tl
     | ExpectAction Connect :: _tl ->
         failwith "Not implemented"
     | _ :: tl ->
         scan tl
     | [] ->
         Lwt.return_unit
   in
   scan config_actions
   >>= fun () -> Lwt_io.printl "Exiting" >>= fun () -> Lwt_io.flush_all () )
  |> Lwt_main.run


[@@@logic]
