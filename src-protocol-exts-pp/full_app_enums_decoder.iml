(* Imandra Inc. copyright 2021 *)
[@@@program]

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode.Infix

[@@@import "../src-protocol-exts/full_app_enums.iml"]

open Full_app_enums

[@@@import "../src-model/src-types/model_app_enums.iml"]

open Model_app_enums

let string_to_execinst_opt d =
  match d with
  | "NotHeld" ->
      Some FIX_ExecInst_NotHeld
  | "Work" ->
      Some FIX_ExecInst_Work
  | "GoAlong" ->
      Some FIX_ExecInst_GoAlong
  | "OverTheDay" ->
      Some FIX_ExecInst_OverTheDay
  | "Held" ->
      Some FIX_ExecInst_Held
  | "ParticipateDoNotInitiate" ->
      Some FIX_ExecInst_ParticipateDoNotInitiate
  | "StrictScale" ->
      Some FIX_ExecInst_StrictScale
  | "TryToScale" ->
      Some FIX_ExecInst_TryToScale
  | "StayOnBidSide" ->
      Some FIX_ExecInst_StayOnBidSide
  | "StayOnOfferSide" ->
      Some FIX_ExecInst_StayOnOfferSide
  | "NoCross" ->
      Some FIX_ExecInst_NoCross
  | "OKToCross" ->
      Some FIX_ExecInst_OKToCross
  | "CallFirst" ->
      Some FIX_ExecInst_CallFirst
  | "PercentOfVolume" ->
      Some FIX_ExecInst_PercentOfVolume
  | "DoNotIncrease" ->
      Some FIX_ExecInst_DoNotIncrease
  | "DoNotReduce" ->
      Some FIX_ExecInst_DoNotReduce
  | "AllOrNone" ->
      Some FIX_ExecInst_AllOrNone
  | "ReinstateOnSystemFailure" ->
      Some FIX_ExecInst_ReinstateOnSystemFailure
  | "InstitutionsOnly" ->
      Some FIX_ExecInst_InstitutionsOnly
  | "ReinstateOnTradingHalt" ->
      Some FIX_ExecInst_ReinstateOnTradingHalt
  | "CancelOnTradingHalt" ->
      Some FIX_ExecInst_CancelOnTradingHalt
  | "LastPeg" ->
      Some FIX_ExecInst_LastPeg
  | "MidPricePeg" ->
      Some FIX_ExecInst_MidPricePeg
  | "NonNegotiable" ->
      Some FIX_ExecInst_NonNegotiable
  | "OpeningPeg" ->
      Some FIX_ExecInst_OpeningPeg
  | "MarketPeg" ->
      Some FIX_ExecInst_MarketPeg
  | "CancelOnSystemFailure" ->
      Some FIX_ExecInst_CancelOnSystemFailure
  | "PrimaryPeg" ->
      Some FIX_ExecInst_PrimaryPeg
  | "Suspend" ->
      Some FIX_ExecInst_Suspend
  | "CustomerDisplayInstruction" ->
      Some FIX_ExecInst_CustomerDisplayInstruction
  | "Netting" ->
      Some FIX_ExecInst_Netting
  | "PegToVWAP" ->
      Some FIX_ExecInst_PegToVWAP
  | "TradeAlong" ->
      Some FIX_ExecInst_TradeAlong
  | "TryToStop" ->
      Some FIX_ExecInst_TryToStop
  | "CancelIfNotBest" ->
      Some FIX_ExecInst_CancelIfNotBest
  | "TrailingStopPeg" ->
      Some FIX_ExecInst_TrailingStopPeg
  | "StrictLimit" ->
      Some FIX_ExecInst_StrictLimit
  | "IgnorePriceValidityChecks" ->
      Some FIX_ExecInst_IgnorePriceValidityChecks
  | "PegToLimitPrice" ->
      Some FIX_ExecInst_PegToLimitPrice
  | "WorkToTargetStrategy" ->
      Some FIX_ExecInst_WorkToTargetStrategy
  | _ ->
      None


let string_to_exectype_opt d =
  match d with
  | "New" ->
      Some FIX_ExecType_New
  | "DoneForDay" ->
      Some FIX_ExecType_DoneForDay
  | "Canceled" ->
      Some FIX_ExecType_Canceled
  | "Replaced" ->
      Some FIX_ExecType_Replaced
  | "PendingCancel" ->
      Some FIX_ExecType_PendingCancel
  | "Stopped" ->
      Some FIX_ExecType_Stopped
  | "Rejected" ->
      Some FIX_ExecType_Rejected
  | "Suspended" ->
      Some FIX_ExecType_Suspended
  | "PendingNew" ->
      Some FIX_ExecType_PendingNew
  | "Calculated" ->
      Some FIX_ExecType_Calculated
  | "Expired" ->
      Some FIX_ExecType_Expired
  | "Restated" ->
      Some FIX_ExecType_Restated
  | "PendingReplace" ->
      Some FIX_ExecType_PendingReplace
  | "Trade" ->
      Some FIX_ExecType_Trade
  | "TradeCorrect" ->
      Some FIX_ExecType_TradeCorrect
  | "TradeCancel" ->
      Some FIX_ExecType_TradeCancel
  | "OrderStatus" ->
      Some FIX_ExecType_OrderStatus
  | _ ->
      None


let string_to_ordstatus_opt d =
  match d with
  | "New" ->
      Some FIX_OrdStatus_New
  | "PartiallyFilled" ->
      Some FIX_OrdStatus_PartiallyFilled
  | "Filled" ->
      Some FIX_OrdStatus_Filled
  | "DoneForDay" ->
      Some FIX_OrdStatus_DoneForDay
  | "Canceled" ->
      Some FIX_OrdStatus_Canceled
  | "PendingCancel" ->
      Some FIX_OrdStatus_PendingCancel
  | "Stopped" ->
      Some FIX_OrdStatus_Stopped
  | "Rejected" ->
      Some FIX_OrdStatus_Rejected
  | "Suspended" ->
      Some FIX_OrdStatus_Suspended
  | "PendingNew" ->
      Some FIX_OrdStatus_PendingNew
  | "Calculated" ->
      Some FIX_OrdStatus_Calculated
  | "Expired" ->
      Some FIX_OrdStatus_Expired
  | "AcceptedForBidding" ->
      Some FIX_OrdStatus_AcceptedForBidding
  | "PendingReplace" ->
      Some FIX_OrdStatus_PendingReplace
  | "Replaced" ->
      Some FIX_OrdStatus_Replaced
  | _ ->
      None


let string_to_ordtype_opt d =
  match d with
  | "Market" ->
      Some FIX_OrdType_Market
  | "Limit" ->
      Some FIX_OrdType_Limit
  | "Stop" ->
      Some FIX_OrdType_Stop
  | "StopLimit" ->
      Some FIX_OrdType_StopLimit
  | "WithOrWithout" ->
      Some FIX_OrdType_WithOrWithout
  | "LimitOrBetter" ->
      Some FIX_OrdType_LimitOrBetter
  | "LimitWithOrWithout" ->
      Some FIX_OrdType_LimitWithOrWithout
  | "OnBasis" ->
      Some FIX_OrdType_OnBasis
  | "PreviouslyQuoted" ->
      Some FIX_OrdType_PreviouslyQuoted
  | "PreviouslyIndicated" ->
      Some FIX_OrdType_PreviouslyIndicated
  | "ForexSwap" ->
      Some FIX_OrdType_ForexSwap
  | "Funari" ->
      Some FIX_OrdType_Funari
  | "MarketIfTouched" ->
      Some FIX_OrdType_MarketIfTouched
  | "MarketWithLeftOverAsLimit" ->
      Some FIX_OrdType_MarketWithLeftOverAsLimit
  | "PreviousFundValuationPoint" ->
      Some FIX_OrdType_PreviousFundValuationPoint
  | "NextFundValuationPoint" ->
      Some FIX_OrdType_NextFundValuationPoint
  | "Pegged" ->
      Some FIX_OrdType_Pegged
  | "StopSpread" ->
      Some FIX_OrdType_StopSpread
  | _ ->
      None


let string_to_partysubidtype_opt d =
  match d with
  | "Firm" ->
      Some FIX_PartySubIDType_Firm
  | "Person" ->
      Some FIX_PartySubIDType_Person
  | "System" ->
      Some FIX_PartySubIDType_System
  | "Application" ->
      Some FIX_PartySubIDType_Application
  | "FullLegalNameOfFirm" ->
      Some FIX_PartySubIDType_FullLegalNameOfFirm
  | "PostalAddress" ->
      Some FIX_PartySubIDType_PostalAddress
  | "PhoneNumber" ->
      Some FIX_PartySubIDType_PhoneNumber
  | "EmailAddress" ->
      Some FIX_PartySubIDType_EmailAddress
  | "ContactName" ->
      Some FIX_PartySubIDType_ContactName
  | "SecuritiesAccountNumber" ->
      Some FIX_PartySubIDType_SecuritiesAccountNumber
  | "RegistrationNumber" ->
      Some FIX_PartySubIDType_RegistrationNumber
  | "RegisteredAddressForConfirmation" ->
      Some FIX_PartySubIDType_RegisteredAddressForConfirmation
  | "RegulatoryStatus" ->
      Some FIX_PartySubIDType_RegulatoryStatus
  | "RegistrationName" ->
      Some FIX_PartySubIDType_RegistrationName
  | "CashAccountNumber" ->
      Some FIX_PartySubIDType_CashAccountNumber
  | "BIC" ->
      Some FIX_PartySubIDType_BIC
  | "CSDParticipantMemberCode" ->
      Some FIX_PartySubIDType_CSDParticipantMemberCode
  | "RegisteredAddress" ->
      Some FIX_PartySubIDType_RegisteredAddress
  | "FundAccountName" ->
      Some FIX_PartySubIDType_FundAccountName
  | "TelexNumber" ->
      Some FIX_PartySubIDType_TelexNumber
  | "FaxNumber" ->
      Some FIX_PartySubIDType_FaxNumber
  | "SecuritiesAccountName" ->
      Some FIX_PartySubIDType_SecuritiesAccountName
  | "CashAccountName" ->
      Some FIX_PartySubIDType_CashAccountName
  | "Department" ->
      Some FIX_PartySubIDType_Department
  | "LocationDesk" ->
      Some FIX_PartySubIDType_LocationDesk
  | "PositionAccountType" ->
      Some FIX_PartySubIDType_PositionAccountType
  | _ ->
      None


let string_to_side_opt d =
  match d with
  | "Buy" ->
      Some FIX_Side_Buy
  | "Sell" ->
      Some FIX_Side_Sell
  | "BuyMinus" ->
      Some FIX_Side_BuyMinus
  | "SellPlus" ->
      Some FIX_Side_SellPlus
  | "SellShort" ->
      Some FIX_Side_SellShort
  | "SellShortExempt" ->
      Some FIX_Side_SellShortExempt
  | "Undisclosed" ->
      Some FIX_Side_Undisclosed
  | "Cross" ->
      Some FIX_Side_Cross
  | "CrossShort" ->
      Some FIX_Side_CrossShort
  | "CrossShortExempt" ->
      Some FIX_Side_CrossShortExempt
  | "AsDefined" ->
      Some FIX_Side_AsDefined
  | "Opposite" ->
      Some FIX_Side_Opposite
  | "Subscribe" ->
      Some FIX_Side_Subscribe
  | "Redeem" ->
      Some FIX_Side_Redeem
  | "Lend" ->
      Some FIX_Side_Lend
  | "Borrow" ->
      Some FIX_Side_Borrow
  | _ ->
      None


let full_enum_execinst_decoder : fix_inv_wrapper_ExecInst list decoder =
  list
    (single_field (fun x ->
         match x with
         | "Ok" ->
             string
             >>= fun x ->
             ( match string_to_execinst_opt x with
             | None ->
                 fail "Unknown enum (ExecInst) encoding."
             | Some y ->
                 succeed (Ok y) )
         | "Error" ->
             string >>= fun x -> succeed (Error x)
         | _ ->
             fail "Ok or Error" ) )


let full_enum_exectype_decoder : fix_inv_wrapper_ExecType decoder =
  single_field (fun x ->
      match x with
      | "Ok" ->
          string
          >>= fun x ->
          ( match string_to_exectype_opt x with
          | None ->
              fail "Unknown enum (ExecType) encoding."
          | Some y ->
              succeed (Ok y) )
      | "Error" ->
          string >>= fun x -> succeed (Error x)
      | _ ->
          fail "Ok to Error" )


let full_enum_ordstatus_decoder : fix_inv_wrapper_OrdStatus decoder =
  single_field (fun x ->
      match x with
      | "Ok" ->
          string
          >>= fun x ->
          ( match string_to_ordstatus_opt x with
          | None ->
              fail "Unknown enum (OrdStatus) encoding."
          | Some y ->
              succeed (Ok y) )
      | "Error" ->
          string >>= fun x -> succeed (Error x)
      | _ ->
          fail "Ok to Error" )


let full_enum_ordtype_decoder : fix_inv_wrapper_OrdType decoder =
  single_field (fun x ->
      match x with
      | "Ok" ->
          string
          >>= fun x ->
          ( match string_to_ordtype_opt x with
          | None ->
              fail "Unknown enum (OrdType) encoding."
          | Some y ->
              succeed (Ok y) )
      | "Error" ->
          string >>= fun x -> succeed (Error x)
      | _ ->
          fail "Ok to Error" )


let full_enum_partysubidtype_decoder : fix_inv_wrapper_PartySubIDType decoder =
  single_field (fun x ->
      match x with
      | "Ok" ->
          string
          >>= fun x ->
          ( match string_to_partysubidtype_opt x with
          | None ->
              fail "Unknown enum (PartySubIDType) encoding."
          | Some y ->
              succeed (Ok y) )
      | "Error" ->
          string >>= fun x -> succeed (Error x)
      | _ ->
          fail "Ok to Error" )


let full_enum_side_decoder : fix_inv_wrapper_Side decoder =
  single_field (fun x ->
      match x with
      | "Ok" ->
          string
          >>= fun x ->
          ( match string_to_side_opt x with
          | None ->
              fail "Unknown enum (Side) encoding."
          | Some y ->
              succeed (Ok y) )
      | "Error" ->
          string >>= fun x -> succeed (Error x)
      | _ ->
          fail "Ok to Error" )


[@@@logic]
