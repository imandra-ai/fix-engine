(** JSON printers for engine model state. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    fix_engine_json.ml

*)
[@@@import "../src/fix_engine_state.iml"]
[@@@import "../src-core-pp/datetime_json.iml"]
[@@@import "../src-core-pp/base_types_json.iml"]
[@@@import "full_admin_tags_json.iml"]
[@@@import "full_messages_json.iml"]

[@@@program]
open Yojson.Basic
open Fix_engine_state
open Datetime_json
open Base_types_json
open Full_admin_tags_json
open Full_admin_messages_json
open Full_messages_json



let fix_engine_mode_to_string = function
    | NoActiveSession                                   -> "NoActiveSession"
    | LogonInitiated                                    -> "LogonInitiated"
    | ActiveSession                                     -> "ActiveSession"
    | GapDetected                                       -> "GapDetected"
    | ShuttingDown                                      -> "ShuttingDown"
    | Recovery                                          -> "Recovery"
    | Retransmit                                        -> "Retransmit"
    | ShutdownInitiated                                 -> "ShutdownInitiated"
    | Error                                             -> "Error"
    | CacheReplay                                       -> "CacheReplay"
    | WaitingForHeartbeat                               -> "WaitingForHeartbeat"
;;

let fix_engine_transition_message_to_string = function
    | ShuttingDown msg                                  -> "ShuttingDown: " ^ msg
    | LogonFailed msg                                   -> "LogonFailed: " ^ msg
    | LogonSucceeded msg                                -> "LogonSucceeded: " ^ msg
    | MissingField tag                                  -> "MissingField: " ^ (full_admin_field_tag_to_string tag)
    | SequenceNumberReset num                           -> "SequenceNumberReset: to " ^ (Int.to_string num)
    | LogoutTimeout                                     -> "LogoutTimeout"
    | LogoutComplete                                    -> "LogoutComplete"
    | GapDetected                                       -> "GapDetected"
    | ValidDuplicateIgnored                             -> "ValidDuplicateIgnored"
    | TestRequestReceived msg                           -> "TestRequestReceived: " ^ msg
    | TestRequestSent msg                               -> "TestRequestSent: " ^ msg
    | TestRequestTimeout                                -> "TestRequestTimeout"
    | TestRequestAcknowledged                           -> "TestRequestAcknowledged"
    | MessageIgnored msg                                -> "MessageIgnored: " ^ msg
    | TerminateTransport msg                            -> "TerminateTransport: " ^ msg 

let manual_int_data_to_json x : Yojson.Basic.t = match x with
    | ResetSession    -> `String "ResetSession"
    | IncrementOutSeq -> `String "IncrementOutSeq"
    | SendBusinessReject data -> `Assoc
      [ ( "IncrementOutSeq" , full_msg_business_reject_to_json data ) ]



(** These are the messages going in/out of the engine to the owner. *)
let int_inc_msg_to_json x : Yojson.Basic.t = match x with
    | IncIntMsg_TimeChange t                            -> `Assoc [ ( "TimeChange",         `Assoc [ ( "new_time"       , utctimestamp_micro_to_json t )]             )]
    | IncIntMsg_CreateSession cs                        -> `Assoc [ ( "CreateSession",      `Assoc [ ( "dest_comp_id"   , `String cs.dest_comp_id )])]
    | IncIntMsg_EndSession                              -> `String "EndSession"
    | IncIntMsg_ApplicationData d                       -> `Assoc [ ( "ApplicationData",    `Assoc [ ( "msg"            , ( full_app_msg_to_json d) )] )]
    | IncIntMsg_TransportTermination                    -> `String "TransportTermination"
    | IncIntMsg_ManualIntervention m                    -> `Assoc [ ( "ManualIntervention", manual_int_data_to_json m)]
;;

let int_out_msg_to_json x : Yojson.Basic.t = match x with
    | OutIntMsg_ResendApplicationData d                 -> `Assoc [ ( "ResendApplicationData", `Assoc [ ( "msg"            , ( full_app_msg_to_json d) )] )]
    | OutIntMsg_ApplicationData d                       -> `Assoc [ ( "ApplicationData",       `Assoc [ ( "msg"            , ( full_app_msg_to_json d) )] )]
    | OutIntMsg_Reject                                  -> `String "Reject"
;;

let int_inc_msg_to_str i =
   pretty_to_string (int_inc_msg_to_json i)
;;

let int_out_msg_to_str i =
    pretty_to_string (int_out_msg_to_json i)
;;


let int_inc_msg_opt_to_json : ( fix_engine_int_inc_msg option -> Yojson.Basic.t) =
    function None -> `Null | Some i -> int_inc_msg_to_json (i)
;;

let int_out_msg_opt_to_json : ( fix_engine_int_out_msg option -> Yojson.Basic.t) =
    function None -> `Null | Some i -> int_out_msg_to_json (i)
;;

let cache_entry_to_json utctimestamp_to_json : cache_entry -> Yojson.Basic.t = 
  let full_valid_msg_to_json = full_valid_msg_to_json utctimestamp_to_json in
  function
  | CacheGap (x,y) -> `Assoc [ ("CacheGap" , `List[int_to_json x ; int_to_json y ] )]
  | CacheMessage m -> `Assoc [ ("CacheMessage" , full_valid_msg_to_json m ) ]
;;

let cache_entry_list_to_json utctimestamp_to_json (l : cache_entry list) : Yojson.Basic.t =
  `List ( l |> List.map (cache_entry_to_json utctimestamp_to_json) )


let fix_engine_state_to_json utctimestamp_to_json s =
    let full_msg_list_to_json = full_msg_list_to_json utctimestamp_to_json in  
    let full_top_level_msg_opt_to_json = full_top_level_msg_opt_to_json utctimestamp_to_json in
    let cache_entry_list_to_json = cache_entry_list_to_json utctimestamp_to_json in
    `Assoc [
        ( "curr_mode"                                   , `String (fix_engine_mode_to_string s.fe_curr_mode)    );
        ( "initiator"                                   , bool_opt_to_json s.fe_initiator                       );
        ( "curr_time"                                   , utctimestamp_micro_to_json s.fe_curr_time                   );
        ( "comp_id"                                     , `String s.fe_comp_id                                  );
        ( "target_comp_id"                              , `String s.fe_target_comp_id                           );
        ( "incoming_int_msgs"                           , int_inc_msg_opt_to_json s.incoming_int_msg            );
        ( "outgoing_int_msgs"                           , int_out_msg_opt_to_json s.outgoing_int_msg            );
        ( "incoming_seq_num"                            , `Int (Z.to_int s.incoming_seq_num)                    );
        ( "outgoing_seq_num"                            , `Int (Z.to_int s.outgoing_seq_num)                    );
        ( "incoming_fix_msgs"                           , full_top_level_msg_opt_to_json s.incoming_fix_msg     );
        ( "outgoing_fix_msgs"                           , full_top_level_msg_opt_to_json s.outgoing_fix_msg     );
        ( "cache"                                       , cache_entry_list_to_json s.fe_cache                   );
        ( "history"                                     , full_msg_list_to_json s.fe_history                    );
        ( "last_hearbeat_received"                      , utctimestamp_micro_to_json s.fe_last_data_received          );
        ( "heartbeat_interval"                          , duration_to_json s.fe_heartbeat_interval              );
        ( "history_to_send"                             , full_msg_list_to_json s.fe_history_to_send            );
        ( "application_up"                              , `Bool s.fe_application_up                             );
    ]
;;


let engine_state_to_str utctimestamp_to_json s =
    pretty_to_string ((fix_engine_state_to_json utctimestamp_to_json) s)
;;


let print_states utctimestamp_to_json states =
    String.concat "\n" (List.map (engine_state_to_str utctimestamp_to_json) states)
;;
[@@@logic]
