(** Parser for full administrative messages. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    parse_full_messages.ml

*)

[@@@require "fix-engine.util-msg"]
[@@@import "../src-protocol/full_message_tags.iml"]
[@@@import "../src-protocol/full_messages.iml"]
[@@@import "../src-core-pp/parser_utils.iml"]
[@@@import "../src-core-pp/parse_base_types.iml"]
[@@@import "parse_full_tags.iml"]
[@@@import "parse_admin_messages.iml"]
[@@@program]
open Full_message_tags
open Full_messages
open Parser_utils.Parser
open Parse_base_types
open Parse_full_tags
module P = Parser_combinators;;


let parse_msg_data msg_tag_str = P.(
  match parse_full_msg_tag msg_tag_str with
  | Some (Full_Admin_Msg_Tag msg_tag) ->
    let+ x = Parse_admin_messages.parse_admin_msg_data msg_tag in
    Full_FIX_Admin_Msg x
  | Some (Full_App_Msg_Tag _) ->
    let+ msg = get_msg in
    let msg = {msg_tag = msg_tag_str ; payload = msg} in
    Full_FIX_App_Msg msg
  | None -> fail (UnknownMessageTag msg_tag_str)
)
;;

let parse_header parse_UTCTimestamp = P.(
  let* h_begin_string = req "8" parse_string in
  let* h_body_length = req "9" parse_int in
  let* h_sender_comp_id = req "49" parse_string in
  let* h_target_comp_id = req "56" parse_string in
  let* h_msg_seq_num = req "34" parse_int in
  let* h_sending_time = req "52" parse_UTCTimestamp in
  let* h_on_behalf_of_comp_id = opt "115" parse_string in
  let* h_deliver_to_comp_id = opt "128" parse_string in
  let* h_secure_data_len = opt "90" parse_int in
  let* h_secure_data = opt "91" parse_int in
  let* h_sender_sub_id = opt "50" parse_string in
  let* h_sender_location_id = opt "142" parse_string in
  let* h_target_sub_id = opt "57" parse_string in
  let* h_target_location_id = opt "143" parse_string in
  let* h_on_behalf_of_sub_id = opt "116" parse_string in
  let* h_on_behalf_of_location_id = opt "144" parse_string in
  let* h_deliver_to_sub_id = opt "129" parse_string in
  let* h_deliver_to_location_id = opt "145" parse_string in
  let* h_poss_dup_flag = opt "43" parse_bool in
  let* h_poss_resend = opt "97" parse_bool in
  let* h_orig_sending_time = opt "122" parse_UTCTimestamp in
  let* h_xml_data_len = opt "212" parse_int in
  let* h_xml_data = opt "213" parse_int in
  let* h_message_encoding = opt "347" parse_int in
  let* h_last_msg_seq_num_processed = opt "369" parse_int in
  let* h_no_hops = opt "627" parse_int in
  return
  { h_begin_string
  ; h_body_length
  ; h_sender_comp_id
  ; h_target_comp_id
  ; h_msg_seq_num
  ; h_on_behalf_of_comp_id
  ; h_deliver_to_comp_id
  ; h_secure_data_len
  ; h_secure_data
  ; h_sender_sub_id
  ; h_sender_location_id
  ; h_target_sub_id
  ; h_target_location_id
  ; h_on_behalf_of_sub_id
  ; h_on_behalf_of_location_id
  ; h_deliver_to_sub_id
  ; h_deliver_to_location_id
  ; h_poss_dup_flag
  ; h_poss_resend
  ; h_sending_time
  ; h_orig_sending_time
  ; h_xml_data_len
  ; h_xml_data
  ; h_message_encoding
  ; h_last_msg_seq_num_processed
  ; h_no_hops
  }
)
;;

let parse_trailer = P.(
  let* signature_length = opt "93" parse_int in
  let* signature = opt "89" parse_int in
  let* check_sum = req "10" parse_int in
  return
  { signature_length
  ; signature
  ; check_sum
  }
)
;;


let check_first_three_tags ( msg : (string * string) list ) : string option =
  match msg with
  | ("8", _) :: ("9", _)  :: ("35", _) :: _ -> None (* all good *)
  | ("8", _) :: ("9", _) :: (tag, _) :: _ -> Some tag
  | ("8", _) :: (tag, _) :: _ -> Some tag
  | (tag, _) :: _ -> Some tag
  | [] -> None
;;

let check_tags_are_integers ( msg : (string * string) list ) : bool =
    List.for_all ( fun (k,_v) ->
        try Z.of_string k > 0 with _ -> false
    ) msg
;;

let valid_body_length = Message.valid_body_length
;;

let valid_checksum = Message.valid_checksum
;;

(**
    Runs basic message intergrity checks. Returns ParseSuccess ()  on success.
*)
let message_basic_check = P.(
  let* msg = get_msg in
  match check_first_three_tags msg with
  | Some tag -> fail @@ RequiredTagMissing tag
  | None ->
    if not (check_tags_are_integers msg ) then fail @@ GarbledMessage else
    if not (valid_checksum          msg ) then fail @@ GarbledMessage else
    if not (valid_body_length       msg ) then fail @@ GarbledMessage else
    return ()
)
;;

let make_session_reject reason tagstr msg =
    match ( List.assoc "34" msg) with None -> Garbled | Some x ->
       (match parse_int x with None -> Garbled | Some seq_num ->
            (match ( List.assoc "35" msg) with None -> Garbled | Some y -> (let msg_tag = parse_full_msg_tag y in
            let field_tag = match msg_tag with
                | None -> None
                | Some _msg_tag -> parse_full_field_tag tagstr
            in
            SessionRejectedMsg {
                srej_msg_msg_seq_num   = seq_num   ;
                srej_msg_field_tag     = field_tag ;
                srej_msg_msg_type      = msg_tag;
                srej_msg_reject_reason = Some reason ;
                srej_text              = None ;
                srej_encoded_text_len  = None ;
                srej_encoded_text      = None ;
    })))
;;

(** Parse a toplevel message *)
let parse_top_level_msg parse_UTCTimestamp : full_top_level_msg P.t = P.(
    let* msg = get_msg in
    let main_parser =
      let* () = message_basic_check  in
      let* full_msg_header = parse_header parse_UTCTimestamp in
      let* full_msg_trailer = parse_trailer in
        (* TODO: is [block] different than what we do above?
          block msg parse_header  @@ fun msg full_msg_header   ->
          block msg parse_trailer @@ fun msg full_msg_trailer  ->
          ParseSuccess (full_msg_header, full_msg_trailer), msg 
          in
            *)
      let* msg_tag_str = opt "35" parse_string in
      match msg_tag_str with
      | None -> fail GarbledMessage
      | Some msg_tag_str ->
        let+ full_msg_data = parse_msg_data msg_tag_str in
        { full_msg_header
        ; full_msg_data
        ; full_msg_trailer
        }
    in

    let* parse_result = reflect_err main_parser in
    match parse_result with
    | Ok msg -> return (ValidMsg msg)
    | Error GarbledMessage -> return Garbled
    | Error (UnknownMessageTag tagstr) -> fail @@ make_session_reject Full_admin_enums.InvalidMsgType tagstr msg
    | Error (RequiredTagMissing tagstr) -> fail @@ make_session_reject Full_admin_enums.RequiredTagMissing tagstr msg
    | Error (DuplicateTag tagstr) -> fail @@ make_session_reject Full_admin_enums.TagAppearsMoreThanOnce tagstr msg
    | Error (WrongValueFormat tagstr) -> fail @@ make_session_reject Full_admin_enums.IncorrectDataFormatForValue tagstr msg
    | Error (UndefinedTag tagstr) -> fail @@ make_session_reject Full_admin_enums.TagNotDefinedForThisMessageType tagstr msg
    | Error (IncorrectNumInGroupCount tagstr) ->
        fail @@ make_session_reject Full_admin_enums.IncorrectNumInGroupCountForRepeatingGroup tagstr msg
    | Error (RepeatingGroupOutOfOrder tagstr) ->
        fail @@ make_session_reject Full_admin_enums.RepeatingGroupFieldsOutOfOrder tagstr msg
    | Error (EmptyValue tag) ->
        fail @@ make_session_reject Full_admin_enums.TagSecifiedWithoutAValue tag msg
)
;;
[@@@logic]
