(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    full_admin_enums_json.ml
*)
[@@@import "../src-protocol/full_admin_enums.iml"]

[@@@program]

open Yojson.Basic
open Full_admin_enums

let session_reject_reason_to_string = function
  | InvalidTagNumber -> "InvalidTagNumber"
  | RequiredTagMissing -> "RequiredTagMissing"
  | TagNotDefinedForThisMessageType -> "TagNotDefinedForThisMessageType"
  | UndefinedTag -> "UndefinedTag"
  | TagSecifiedWithoutAValue -> "TagSecifiedWithoutAValue"
  | ValueIsIncorrect -> "ValueIsIncorrect"
  | IncorrectDataFormatForValue -> "IncorrectDataFormatForValue"
  | DecryptionProblem -> "DecryptionProblem"
  | SignatureProblem -> "SignatureProblem"
  | CompIDProblem -> "CompIDProblem"
  | SendingTimeAccuracyProblem -> "SendingTimeAccuracyProblem"
  | InvalidMsgType -> "InvalidMsgType"
  | XMLValidationError -> "XMLValidationError"
  | TagAppearsMoreThanOnce -> "TagAppearsMoreThanOnce"
  | TagSpecifiedOutOfRequiredOrder -> "TagSpecifiedOutOfRequiredOrder"
  | RepeatingGroupFieldsOutOfOrder -> "RepeatingGroupFieldsOutOfOrder"
  | IncorrectNumInGroupCountForRepeatingGroup ->
    "IncorrectNumInGroupCountForRepeatingGroup"
  | NonDataValueIncludesFieldDelimiter -> "NonDataValueIncludesFieldDelimiter"
  | Other -> "Other"

let business_reject_reason_to_string = function
  | ApplicationDown -> "ApplicationDown"
  | MessageTypeNotSupported -> "MessageTypeNotSupported"
  | FieldMissing -> "FieldMissing"

let app_reject_reason_to_string = function
  | FIX_App_Reject_MissingReqField -> "MissingReqField"
  | FIX_App_Reject_InvalidField -> "InvalidField"
  | FIX_App_Reject_Custom -> "Custom"

let gapFillFlag_to_string = function
  | FIX_GapFillFlag_Y -> "Y"
  | FIX_GapFillFlag_N -> "N"

let encryption_method_to_string = function
  | PKCS -> "PKCS"
  | DES_ECB -> "DES_ECB"
  | PKCS_DES -> "PKCS_DES"
  | PGP_DES -> "PGP_DES"
  | PGP_DES_MD5 -> "PGP_DES_MD5"
  | PEM_DES_MD5 -> "PEM_DES_MD5"
  | NoEncryption -> "NoEncryption"

let msgdirection_to_string d =
  match d with
  | FIX_MsgDirection_Send -> "Send"
  | FIX_MsgDirection_Receive -> "Receive"

let session_reject_reason_to_json x : Yojson.Basic.t =
  `String (session_reject_reason_to_string x)

let business_reject_reason_to_json x : Yojson.Basic.t =
  `String (business_reject_reason_to_string x)

let app_reject_reason_to_json x : Yojson.Basic.t =
  `String (app_reject_reason_to_string x)

let gapFillFlag_to_json x : Yojson.Basic.t = `String (gapFillFlag_to_string x)

let encryption_method_to_json x : Yojson.Basic.t =
  `String (encryption_method_to_string x)

(** *)
let msgdirection_to_json x : Yojson.Basic.t = `String (msgdirection_to_string x)

let session_reject_reason_opt_to_json = function
  | None -> `Null
  | Some (Ok x) -> session_reject_reason_to_json x
  | Some (Error s) -> `String s

let business_reject_reason_opt_to_json = function
  | None -> `Null
  | Some x -> business_reject_reason_to_json x

let app_reject_reason_opt_to_json = function
  | None -> `Null
  | Some x -> app_reject_reason_to_json x

let gapFillFlag_opt_to_json = function
  | None -> `Null
  | Some x -> gapFillFlag_to_json x

let encryption_method_opt_to_json = function
  | None -> `Null
  | Some x -> encryption_method_to_json x

(** *)
let msgdirection_opt_to_json = function
  | None -> `Null
  | Some x -> msgdirection_to_json x

[@@@logic]
