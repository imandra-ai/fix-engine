(** Parser for full administrative messages. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2022

    parse_full_messages.ml
*)

[@@@require "fix-engine.util-msg"]

[@@@import "encode_full_tags.iml"]

[@@@import "encode_admin_messages.iml"]

[@@@import "../src-protocol/full_messages.iml"]

[@@@import "../src-core-pp/encode_base_types.iml"]

[@@@program]

open Full_messages
open Encode_base_types
open Encode_full_tags

let req f x = Some (f x)

let opt f v =
  match v with
  | Some x -> Some (f x)
  | None -> None

let encode_msg_data msg =
  match msg with
  | Full_FIX_Admin_Msg msg -> Encode_admin_messages.encode_admin_msg_data msg
  | Full_FIX_App_Msg { payload; _ } ->
    payload |> List.map @@ fun (k, v) -> k, Some v

type fix_encoder_config = {
  begin_string: string;
  encode_UTCTimestamp: Datetime.fix_utctimestamp_micro -> string;
}

let encode_header (config : fix_encoder_config) msg_tag msg =
  let { encode_UTCTimestamp; _ } = config in
  [
    (* Tags 8 and 9 will be added in encode_full_valid_msg *)
    "35", req encode_full_msg_tag msg_tag;
    "49", req encode_string msg.h_sender_comp_id;
    "56", req encode_string msg.h_target_comp_id;
    "34", req encode_int msg.h_msg_seq_num;
    "115", opt encode_string msg.h_on_behalf_of_comp_id;
    "128", opt encode_string msg.h_deliver_to_comp_id;
    "90", opt encode_int msg.h_secure_data_len;
    "91", opt encode_int msg.h_secure_data;
    "50", opt encode_string msg.h_sender_sub_id;
    "142", opt encode_string msg.h_sender_location_id;
    "57", opt encode_string msg.h_target_sub_id;
    "143", opt encode_string msg.h_target_location_id;
    "116", opt encode_string msg.h_on_behalf_of_sub_id;
    "144", opt encode_string msg.h_on_behalf_of_location_id;
    "129", opt encode_string msg.h_deliver_to_sub_id;
    "145", opt encode_string msg.h_deliver_to_location_id;
    "43", opt encode_bool msg.h_poss_dup_flag;
    "97", opt encode_bool msg.h_poss_resend;
    "52", req encode_UTCTimestamp msg.h_sending_time;
    "122", opt encode_UTCTimestamp msg.h_orig_sending_time;
    "212", opt encode_int msg.h_xml_data_len;
    "213", opt encode_int msg.h_xml_data;
    "347", opt encode_int msg.h_message_encoding;
    "369", opt encode_int msg.h_last_msg_seq_num_processed;
    "627", opt encode_int msg.h_no_hops;
  ]

let encode_trailer msg =
  [
    "93", opt encode_int msg.signature_length;
    "89", opt encode_int msg.signature;
  ]

let get_body_length msg =
  let rec scan n msg =
    match msg with
    | ("8", _) :: tl | ("9", _) :: tl -> scan n tl
    | ("10", _) :: _tl -> n
    | (k, v) :: tl -> n + scan String.(length k + length v + 2) tl
    | [] -> n
  in
  scan 0 msg

let get_checksum msg = Z.of_int (Message.checksum msg)

let prepare_packet begin_string msg_body =
  let encode_checksum = Printf.sprintf "%03u" in
  let msg =
    [ "8", begin_string; "9", get_body_length msg_body |> encode_int ]
    @ msg_body
  in
  msg @ [ "10", get_checksum msg |> Z.to_int |> encode_checksum ]

let packet_full_valid_msg (config : fix_encoder_config) x =
  let { begin_string; _ } = config in
  let msgtag = get_full_msg_tag x.full_msg_data in
  let msg_body =
    encode_header config msgtag x.full_msg_header
    @ encode_msg_data x.full_msg_data
    @ encode_trailer x.full_msg_trailer
  in
  let msg_body =
    msg_body
    |> List.filter (fun (_k, v) -> v <> None)
    |> List.map (fun (k, v) ->
           ( k,
             match v with
             | Some v -> v
             | None -> "" ))
  in
  msg_body |> prepare_packet begin_string

let encode_full_valid_msg (config : fix_encoder_config) x =
  x
  |> packet_full_valid_msg config
  |> List.map (fun (k, v) -> k ^ "=" ^ v)
  |> List.fold_left (fun a s -> a ^ s ^ "\001") ""

[@@@logic]
