(** Parse full administrative messages. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    parse_admin_messages.ml

*)
[@@@require "fix-engine.util-msg"]
[@@@import "../src-protocol/full_admin_tags.iml"]
[@@@import "../src-protocol/full_admin_messages.iml"]
[@@@import "../src-core-pp/parser_utils.iml"]
[@@@import "../src-core-pp/parse_base_types.iml"]
[@@@import "../src-core-pp/parse_datetime.iml"]
[@@@import "parse_admin_enums.iml"]
[@@@import "parse_full_tags.iml"]
[@@@import "../src-core/datetime.iml"]
[@@@program]
open Full_admin_tags;;
open Full_admin_messages;;
open Parser_utils.Parser;;
open Parse_base_types;;
open Parse_datetime;;
open Parse_admin_enums;;
open Parse_full_tags;;
open Datetime;;

module P = Parser_combinators;;


let parse_msg_heartbeat_data = P.(
  let* () = check_duplicate_tags in
  let* hb_test_req_id = opt "112" parse_string in
  let+ () = check_unknown_tags in
  { hb_test_req_id }
)
;;

let parse_msg_types = P.(
  let* mtps_ref_msg_type = req "372" parse_full_msg_tag in
  let+ mtps_direction = req "385" parse_MsgDirection in
  { mtps_ref_msg_type
  ; mtps_direction
  }
)
;;

let parse_msg_logon_data = P.(
  let* _, ln_msg_types = repeating "384" ~block_parser:parse_msg_types in
  let* () = check_duplicate_tags in
  let* ln_encrypt_method = req "98" parse_encryption_method in
  let* ln_heartbeat_interval = req "108" parse_int in
  let* ln_raw_data_length = opt "95" parse_int in
  let* ln_raw_data = opt "96" parse_string in
  let* ln_reset_seq_num_flag = opt "141" parse_bool in
  let* ln_next_expected_msg_seq_num = opt "789" parse_int in
  let* ln_max_message_size = opt "383" parse_int in
  let* ln_test_message_indicator = opt "464" parse_bool in
  let* ln_username = opt "553" parse_string in
  let* ln_password = opt "554" parse_string in
  let* _ = opt "21019" parse_string in
  let* _ = opt "21021" parse_string in
  let* _ = opt "21020" parse_string in
  let* _ = opt "1137" parse_string in
  let ln_heartbeat_interval = (seconds_to_duration ln_heartbeat_interval) in
  let+ () = check_unknown_tags in
    { ln_encrypt_method
    ; ln_heartbeat_interval
    ; ln_raw_data_length
    ; ln_raw_data
    ; ln_reset_seq_num_flag
    ; ln_next_expected_msg_seq_num
    ; ln_max_message_size
    ; ln_test_message_indicator
    ; ln_username
    ; ln_password
    ; ln_msg_types
    ; ln_extra_fields = []      (* TODO *)
    }
)
;;

let parse_msg_logoff_data = P.(
  let* () = check_duplicate_tags in
  let* lo_text = opt "58" parse_string in
  let* lo_encoded_text_len = opt "355" parse_int in
  let* lo_encoded_text = opt "354" parse_string in
  let* _ = opt "1409" parse_string in
  let+ () = check_unknown_tags in
  { lo_text
  ; lo_encoded_text_len
  ; lo_encoded_text
  }
)
;;


let parse_msg_resend_request_data = P.(
  let* () = check_duplicate_tags in
  let* rr_begin_seq_num = req "7" parse_int in
  let* rr_end_seq_num = req "16" parse_int in
  let+ () = check_unknown_tags in
  { rr_begin_seq_num
  ; rr_end_seq_num
  }
)
;;


let parse_msg_reject_data = P.(
  let* () = check_duplicate_tags in
  let* sr_ref_seq_num = req "45" parse_int in
  let* sr_ref_tag_id = opt "371" parse_full_field_tag in
  let* sr_ref_msg_type = opt "372" parse_full_msg_tag in
  let* sr_session_reject_reason = opt "373" parse_session_reject_reason in
  let* sr_text = opt "58" parse_string in
  let* sr_encoded_text_len = opt "354" parse_int in
  let* sr_encoded_text = opt "355" parse_string in
  let+ () = check_unknown_tags in
  { sr_ref_seq_num
  ; sr_ref_tag_id
  ; sr_ref_msg_type
  ; sr_session_reject_reason
  ; sr_text
  ; sr_encoded_text_len
  ; sr_encoded_text
  }
)
;;

let parse_msg_sequence_reset_data = P.(
  let* () = check_duplicate_tags in
  let* seqr_new_seq_no = req "36" parse_int in
  let* seqr_gap_fill_flag = opt "123" parse_GapFillFlag in
  let+ () = check_unknown_tags in
  { seqr_new_seq_no
  ; seqr_gap_fill_flag
  }
)
;;


let parse_msg_test_request_data = P.(
  let* () = check_duplicate_tags in
  let* test_req_id = req "112" parse_string in
  let+ () = check_unknown_tags in
  { test_req_id }
)
;;

let parse_msg_business_reject_data = P.(
  let* () = check_duplicate_tags in
  let* br_ref_seq_num = req "45" parse_int in
  let* br_ref_msg_type = req "372" parse_full_msg_tag in
  let* br_ref_field_id = opt "379" parse_full_field_tag in
  let* br_business_reject_reason = req "380" parse_business_reject_reason in
  let* br_text = opt "58" parse_string in
  let* br_encoded_text_len = opt "354" parse_int in
  let* br_encoded_text = opt "354" parse_string in
  let+ () = check_unknown_tags in
  { br_ref_seq_num
  ; br_ref_msg_type
  ; br_ref_field_id
  ; br_business_reject_reason
  ; br_text
  ; br_encoded_text_len
  ; br_encoded_text
  }
  )
;;


let parse_admin_msg_data msg_tag = P.(
  match msg_tag with
  | Full_Msg_Heartbeat_Tag        -> parse_msg_heartbeat_data  >|= fun x -> ( Full_Msg_Heartbeat       x )
  | Full_Msg_TestRequest_Tag     -> parse_msg_test_request_data  >|= fun x -> ( Full_Msg_Test_Request    x )
  | Full_Msg_ResendRequest_Tag   -> parse_msg_resend_request_data  >|= fun x -> ( Full_Msg_Resend_Request  x )
  | Full_Msg_Reject_Tag           -> parse_msg_reject_data >|= fun x -> ( Full_Msg_Reject          x )
  | Full_Msg_SequenceReset_Tag   -> parse_msg_sequence_reset_data >|= fun x -> ( Full_Msg_Sequence_Reset  x )
  | Full_Msg_Logout_Tag           -> parse_msg_logoff_data >|= fun x -> ( Full_Msg_Logoff          x )
  | Full_Msg_Logon_Tag            -> parse_msg_logon_data >|= fun x -> ( Full_Msg_Logon           x )
  | Full_Msg_BusinessMessageReject_Tag  -> parse_msg_business_reject_data >|= fun x -> ( Full_Msg_Business_Reject x )
)
;;
[@@@logic]
