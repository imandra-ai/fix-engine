(** Various parser utilities. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    parser_utils.ml

*)

(** OCaml Stream processing helper functions that break a raw byte stream into
    a stream of key=value pairs and then into a stream of messages.
*)
[@@@program]
[@@@import "parse_base_types.iml"]
[@@@require "fix-engine.util-msg"]


(** Split [str] into pairs of [key/value] separated by [sep],
     each pair being a [key=value] pair. *)
let split_into_key_value (sep:char) (str:string) : (string*string) Seq.t =
  Parse_message_util.split_into_key_value sep str

let split_into_messages (seq: (string*string) Seq.t) : (string*string) list Seq.t =
  Parse_message_util.split_into_messages seq

(** Extract a value given a tag, returns a pair with the value and the rest of the list.*)
let take (key : string) (lst : (string * string) list ) =
  let rec take accu = function
    | (k,v) :: tl ->
      if k = key then (Some v , List.rev accu @ tl)
      else take ((k,v)::accu) tl
    | [] -> (None, List.rev accu) in
  take [] lst
;;

(** Splits a list of [(tag * value)] pairs into two lists on a given tag. The tag
    itself goes into the second list.  If the tag is absent -- returnes an empty
    second list.

    {[
      split_on_tag 4 [(1,0); (2,0); (3,0); (4,0); (5,0); (6,0)] =>
      ( [ (1,0); (2,0); (3,0) ] ,
        [ (4,0); (5,0); (6,0) ]
      )
    ]}
*)
let split_on_tag ( key : string ) ( msg : (string * string) list ) =
  let rec split accu = function
    | (k,v) :: tl -> if k = key then (List.rev accu, (k,v)::tl )
      else split ((k,v)::accu) tl
    | [] -> (List.rev accu, []) in
  split [] msg
;;

(** Uses the first entry tag in the input list to split the list into a list of
    lists, each starting with the tag.
*)
let cut_on_separator ( msg : (string * string) list) =
  let rec cut accu = function
    | [] -> List.rev accu
    | (separator,v)::tl ->
      let current, rest = split_on_tag separator tl in
      let current = (separator,v)::current in
      cut (current::accu) rest
  in
  cut [] msg
;;

(** The Parser module collects an API of parser-combinators for parsing FIX
    messages into OCaml types. Each combinator takes a continuation function
    that returns a [( 'a Parser.t * msg )] type
*)
module Parser = struct

  (** Type alias for a FIX message -- we assyme it is a list of string parirs *)
  type msg = (string * string) list

  (***)
  type 'a t =
    | ParseSuccess             of 'a
    | UnknownMessageTag        of string
    | RequiredTagMissing       of string
    | DuplicateTag             of string
    | WrongValueFormat         of string
    | UndefinedTag             of string
    | EmptyValue               of string
    | IncorrectNumInGroupCount of string
    | RepeatingGroupOutOfOrder of string
    | GarbledMessage

  (** A standard monadic bind operator for the Parser.t type *)
  let ( >>= ) x f = match x with
    | ParseSuccess             x -> f x
    | UnknownMessageTag        x -> UnknownMessageTag        x
    | RequiredTagMissing       x -> RequiredTagMissing       x
    | DuplicateTag             x -> DuplicateTag             x
    | WrongValueFormat         x -> WrongValueFormat         x
    | UndefinedTag             x -> UndefinedTag             x
    | EmptyValue               x -> EmptyValue               x
    | IncorrectNumInGroupCount x -> IncorrectNumInGroupCount x
    | RepeatingGroupOutOfOrder x -> RepeatingGroupOutOfOrder x
    | GarbledMessage             -> GarbledMessage

  (** The modified bind operator that applies a function that
      returns [( 'a Parser.t * msg )] pair *)
  let ( >|>= ) x f : _ t * msg = match x with
    | ParseSuccess             x -> f x
    | UnknownMessageTag        x -> UnknownMessageTag        x , []
    | RequiredTagMissing       x -> RequiredTagMissing       x , []
    | DuplicateTag             x -> DuplicateTag             x , []
    | WrongValueFormat         x -> WrongValueFormat         x , []
    | UndefinedTag             x -> UndefinedTag             x , []
    | EmptyValue               x -> EmptyValue               x , []
    | IncorrectNumInGroupCount x -> IncorrectNumInGroupCount x , []
    | RepeatingGroupOutOfOrder x -> RepeatingGroupOutOfOrder x , []
    | GarbledMessage             -> GarbledMessage , []

  (** A "collect" function that convers ['a t list -> 'a list t]
      Note: Tail-recursive, but reverses the list.
  *)
  let rev_collect (lst: 'a t list) : 'a list t =
    let rec flatten acc = function
      | ParseSuccess x :: tl -> flatten (x::acc) tl
      | UnknownMessageTag        x :: _tl -> UnknownMessageTag  x
      | RequiredTagMissing       x :: _tl -> RequiredTagMissing x
      | DuplicateTag             x :: _tl -> DuplicateTag       x
      | WrongValueFormat         x :: _tl -> WrongValueFormat   x
      | UndefinedTag             x :: _tl -> UndefinedTag       x
      | EmptyValue               x :: _tl -> EmptyValue         x
      | IncorrectNumInGroupCount x :: _tl -> IncorrectNumInGroupCount x
      | RepeatingGroupOutOfOrder x :: _tl -> RepeatingGroupOutOfOrder x
      | GarbledMessage             :: _tl -> GarbledMessage
      | [] -> ParseSuccess acc in
    flatten [] lst

  (** Parser combinators. *)

  (** Each combinator takes the current message as the first argument and the
      continuation function as the last argument.

      A typical message parser would look like this.

      {[
        let parse_message msg = (
          repeating msg "1" parse_rg @@ fun msg group ->
          check_duplicate_tags msg   @@ fun () ->
          block     msg parse_blk    @@ fun msg block ->
          req msg "2" parse_int      @@ fun msg x ->
          opt msg "3" parse_string   @@ fun msg y ->
          req msg "4" parse_int      @@ fun msg z ->
          ParseSuccess \{ block; group; x; y; z \}, msg
        ) |> check_unknown_tags
      ]}
  *)

  (** Optional field combinator, passes None into continuation if the tag is not present *)
  let opt msg tag parser f =
    let value, msg = take tag msg in
    match value with
    | None -> f msg None
    | Some "" -> EmptyValue tag, []
    | Some value -> try
        match parser value with
        | None   -> WrongValueFormat tag, []
        | Some t -> f msg (Some t)
      with _ -> WrongValueFormat tag, []

  (** Required field combinator, returns RequiredTagMissing if the tag is not present *)
  let req msg tag parser f =
    let value, msg = take tag msg in
    match value with
    | None ->  RequiredTagMissing tag, []
    | Some "" -> EmptyValue tag, []
    | Some value -> try
        match parser value with
        | None   -> WrongValueFormat tag , []
        | Some t -> f msg t
      with _ -> WrongValueFormat tag, []

  (** Block parser combinator parsers a record and passes it into the continuation *)
  let block ( msg : msg )
      ( block_parser : msg -> 'a t * msg )
      ( f : msg -> 'a -> 'b t * msg) =
    let value, msg = block_parser msg in
    value >|>= f msg

  (** Repeating group parser combinator, starting from the tag that encodes
      the length of the list, identifies the subgroups and passes each of them
      into the block parser. Performs a number of consistency checks on the parsed
      results.
  *)

  let repeating ( msg : msg )
          ( tag : string )
          ( block_parser : msg -> 'a t * msg  )
          ( f : msg  -> (Z.t option *'a list) -> 'b t * msg ) =
        (* Finding where the repeating group starts *)
        let leading_msg, groups_msg = split_on_tag tag msg in
        (* groups_msg starts with the NumInGroup tag, we parse it *)
        opt groups_msg tag Parse_base_types.parse_int @@ fun groups_msg numInGroup ->
        match numInGroup with
        | None -> ( ParseSuccess (None,[]) >|>= f msg )
        | Some 0 -> ( ParseSuccess (Some 0,[]) >|>= f (leading_msg @ groups_msg) )
        | Some numInGroup ->
          (* Break the list into a list of lists using the separator *)
          let groups = cut_on_separator groups_msg in
          (* Check that the length is correct *)
          if List.length groups <> numInGroup then IncorrectNumInGroupCount tag >|>= f []  else
            (* Pass each list into the block parser ( reverses the list ) *)
            let groups : ('a t * (string * string) list) list = groups |> (fun x -> (List.rev  (List.map (fun y -> block_parser y )x ))) in
            (* Get the rest of the message from the last group entry *)
            let groups, msg = match groups with
              | [] -> [], [] | (v, following_msg)::tl -> ( (v,[])::tl, leading_msg @ following_msg ) in
            (* Check that every group have parsed cleanly *)
            let groups = groups |> List.map
                           ( function (v, []) -> v | ( _ , (k , _ )::_tl ) -> RepeatingGroupOutOfOrder k ) in
            (* "Monadic flatten" the list and pass into the continuation with the rest of the message *)
            rev_collect groups >|>= fun groups ->
            ParseSuccess (Some numInGroup, groups) >|>= f msg

  let do_check_duplicate_tags = ref true

  (** Checks for duplicate tags in messages -- should be called after all the repeating groups are porcessed *)
  let check_duplicate_tags ( msg : msg )
        ( f : unit -> 'a t * msg ) =
    if !do_check_duplicate_tags then
      let rec scan = function
        | h::tl ->
           if List.mem h tl
           then DuplicateTag h , []
           else scan tl
        | [] -> f () in
      msg |> List.map fst |> scan
    else
      f ()

  (** This finalizes the message -- if there are any unplrocessed tag=value pairs left -- we return an error *)
  let check_unknown_tags (result , msg) =
    if !Parser_combinators.do_check_unknown_tags then
      match result with
      | ParseSuccess _ ->
         ( match msg with
           | [] -> result
           | (tag,_v)::_tl -> UndefinedTag tag )
      | _ -> result
    else
      result

  let rec get_top_and_last (l:'a list): ('a list * 'a option) =
    match l with
    | [] -> ([],None)
    | [h] -> ([],Some h)
    | h::t ->
      let ans = get_top_and_last t in
      (h::(fst ans),snd ans)
  ;;

  let list_to_split (a:string list) (c:char) : string =
    match a with
    | [] -> ""
    | _ ->
      let (t,l) = get_top_and_last a in
      (List.fold_left (fun x y -> x^y^(Char.escaped c)) "" t) ^
      match l with
      | None -> ""
      | Some x -> x
  ;;

  let rec split_to_list (a:string) (c:char) : string list =
    try
      let index = Z.of_int (Caml.String.index a c) in
      let sub = String.sub a 0 index in
      match sub with
      | None ->
        let rest = String.sub a (index+1) ((String.length a)-(index+1)) in
        (match rest with
            | None -> []
            | Some y -> split_to_list y c
        )
      | Some x ->
        let rest = String.sub a (index+1) ((String.length a)-(index+1)) in
        (match rest with
            | None -> split_to_list x c
            | Some y -> x :: (split_to_list y c))
    with Not_found -> [a]
  ;;

end

[@@@logic]
