(** Parsers for base types. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    datetime_json.iml
*)
[@@@import "../src-core/numeric.iml"]
[@@@program]
open Numeric;;

let parse_string (str : string) : string option =
  Some str
;;

let parse_lstring (str:string) : LString.t option =
  Some (LString.of_string str)
;;

let parse_symbol (str : string) : string option =
  Some str
;;

let parse_char (str: string) : string option =
  Some str

let parse_int ( str : string ) : int option =
  if String.get str (Z.to_int 0) = '+' then None else
    try
      Some (Z.of_string str)
    with _ -> None
;;

let parse_bool ( str : string) : bool option =
  match str with
  | "Y" -> Some true
  | "N" -> Some false
  | _ -> None
;;

(** Convert string to fix_float type. *)
let parse_float (str: string) : Numeric.fix_float_6 option =
  if String.get str (Z.to_int 0) = '+' then None else
    try (match CCString.split_on_char '.' str with
      | [whole] -> Some (Float_6 ( Z.of_string whole * 1000000 ))
      | [whole;tail] ->
        (try let fraction =
            Scanf.sscanf (CCString.pad ~side:`Right ~c:'0' 6i tail) "%06d" (fun x -> Z.of_int x) in
            Some (Float_6 ((Z.of_string whole * 1000000) + fraction))
        with _ -> None)
      | _ -> None)
    with _ -> None
;;
[@@@logic]
