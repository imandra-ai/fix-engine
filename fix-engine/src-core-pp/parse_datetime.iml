(** Parsers for datetime types. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    parse_datetime.ml

*)
[@@@import "../src-core/datetime.iml"]
[@@@program]
open Datetime;;

let parse_date str =
  if String.length str <> 8 then None else
    try
      Scanf.sscanf str "%04u%02u%02u"
        ( fun y m d -> Some (Z.of_int y, Z.of_int m, Z.of_int d) )
    with | _ -> None

let parse_time_ms_strict str =
  let length = String.length str in
  if (length <> 8) && (length <> 12) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ms ->
          let ms =
            if ms = "" then None
            else Scanf.sscanf ms ".%03d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ms))
    with
    | _ -> None

let parse_time_ms str =
  let length = String.length str in
  if (length < 8) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ms ->
          let ms =
            if ms = "" then None
            else Scanf.sscanf (CCString.pad ~side:`Right ~c:'0' 3i ms) ".%03d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ms))
    with
    | _ -> None

let parse_time_us_strict str =
  let length = String.length str in
  if (length <> 8) && (length <> 15) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s us ->
          let us =
            if us = "" then None
            else Scanf.sscanf us ".%06d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, us))
    with
    | _ -> None

let parse_time_us str =
  let length = String.length str in
  if (length < 8) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s us ->
          let us =
            if us = "" then None
            else Scanf.sscanf (CCString.pad ~side:`Right ~c:'0' 6i us) ".%06d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, us))
    with
    | _ -> None

let parse_time_ns_strict str =
  let length = String.length str in
  if (length <> 8) && (length <> 18) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ns ->
          let ns =
            if ns = "" then None
            else Scanf.sscanf ns ".%09d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ns))
    with
    | _ -> None

let parse_time_ns str =
  let length = String.length str in
  if (length < 8) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ns ->
          let ns =
            if ns = "" then None
            else Scanf.sscanf (CCString.pad ~side:`Right ~c:'0' 9i ns) ".%09d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ns))
    with
    | _ -> None

let parse_time_ps_strict str =
  let length = String.length str in
  if (length <> 8) && (length <> 21) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ps ->
          let ps =
            if ps = "" then None
            else Scanf.sscanf ps ".%12d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ps))
    with
    | _ -> None

let parse_time_ps str =
  let length = String.length str in
  if (length < 8) then None else
    try
      Scanf.sscanf str "%02u:%02u:%02u%s"
        (fun h m s ps ->
          let ps =
            if ps = "" then None
            else Scanf.sscanf (CCString.pad ~side:`Right ~c:'0' 12i ps) ".%09d" (fun x -> Some (Z.of_int x))
          in
          Some (Z.of_int h, Z.of_int m, Z.of_int s, ps))
    with
    | _ -> None

let parse_UTCDateOnly str : fix_utcdateonly option =
  parse_date str |> Option.flat_map T.of_date

let parse_LocalMktDate str : fix_localmktdate option =
  parse_date str |> Option.flat_map T.of_date

let parse_UTCTimeOnly_milli_strict str : fix_utctimeonly_milli option =
  parse_time_ms_strict str
  |> Option.flat_map (fun (hh, mm, ss, ms) ->
         make_utctimeonly_milli hh mm ss ms)

let parse_UTCTimeOnly_milli str : fix_utctimeonly_milli option =
  parse_time_ms str
  |> Option.flat_map (fun (hh, mm, ss, ms) ->
          make_utctimeonly_milli hh mm ss ms)

let parse_UTCTimeOnly_micro_strict str : fix_utctimeonly_micro option =
  parse_time_us_strict str
  |> Option.flat_map (fun (hh, mm, ss, us) ->
         make_utctimeonly_micro hh mm ss us)

let parse_UTCTimeOnly_micro str : fix_utctimeonly_micro option =
  parse_time_us str
  |> Option.flat_map (fun (hh, mm, ss, us) ->
          make_utctimeonly_micro hh mm ss us)

let parse_UTCTimeOnly_nano_strict str : fix_utctimeonly_nano option =
  parse_time_ns_strict str
  |> Option.flat_map (fun (hh, mm, ss, ns) ->
        make_utctimeonly_nano hh mm ss ns)

let parse_UTCTimeOnly_nano str : fix_utctimeonly_nano option =
  parse_time_ns str
  |> Option.flat_map (fun (hh, mm, ss, ns) ->
        make_utctimeonly_nano hh mm ss ns)

let parse_UTCTimeOnly_pico_strict str : fix_utctimeonly_pico option =
  parse_time_ps_strict str
  |> Option.flat_map (fun (hh, mm, ss, ps) ->
        make_utctimeonly_pico hh mm ss ps)

let parse_UTCTimeOnly_pico str : fix_utctimeonly_pico option =
  parse_time_ps str
  |> Option.flat_map (fun (hh, mm, ss, ps) ->
        make_utctimeonly_pico hh mm ss ps)

let parse_UTCTimestamp_milli_strict str : fix_utctimestamp_milli option =
  let length = String.length str in
  if (length <> 17) && (length <> 21) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ms_strict t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ms)) ->
         make_utctimestamp_milli y m d hh mm ss ms
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_milli str : fix_utctimestamp_milli option =
  let length = String.length str in
  if (length <> 17) && (length <> 21) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ms t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ms)) ->
          make_utctimestamp_milli y m d hh mm ss ms
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_micro_strict str =
  let length = String.length str in
  if (length <> 17) && (length <> 24) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_us_strict t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, us)) ->
         make_utctimestamp_micro y m d hh mm ss us
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_micro str =
  let length = String.length str in
  if (length <> 17) && (length <> 24) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_us t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, us)) ->
          make_utctimestamp_micro y m d hh mm ss us
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_nano_strict str =
  let length = String.length str in
  if (length <> 17) && (length <> 27) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ns_strict t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ns)) ->
          make_utctimestamp_nano y m d hh mm ss ns
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_nano str =
  let length = String.length str in
  if (length <> 17) && (length <> 27) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ns t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ns)) ->
          make_utctimestamp_nano y m d hh mm ss ns
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_pico_strict str =
  let length = String.length str in
  if (length <> 17) && (length <> 30) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ps_strict t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ps)) ->
          make_utctimestamp_pico y m d hh mm ss ps
      | _ -> None
    with
    | _ -> None

let parse_UTCTimestamp_pico str =
  let length = String.length str in
  if (length <> 17) && (length <> 30) then None else
    try
      let date, time =
        Scanf.sscanf str "%s@-%s"
          (fun d t -> (parse_date d, parse_time_ps t))
      in
      match date, time with
      | (Some (y, m, d), Some (hh, mm, ss, ps)) ->
          make_utctimestamp_pico y m d hh mm ss ps
      | _ -> None
    with
    | _ -> None

let parse_MonthYear str =
  let open TE in
  let length = String.length str in
  if (length < 6) then None else
    try
      let y, m, tail = Scanf.sscanf str "%04u%02u%s" (fun y m t -> (Z.of_int y, Z.of_int m, t)) in
      let _d, week =
        match tail with
        | "w1" -> (1, Some Week_1)
        | "w2" -> (1, Some Week_2)
        | "w3" -> (1, Some Week_3)
        | "w4" -> (1, Some Week_4)
        | "w5" -> (1, Some Week_5)
        | ""   -> (1, None)
        | day  -> (Z.of_string day, None)
      in
      make_monthyear y m week
    with
    | _ -> None


let parse_Duration (str:string) : fix_duration option =
  let parse_int ( str : string ) : int option =
    try  Some (Z.of_string str)
    with _ -> None
  in
  if String.length str > 1 then
    (try let t,v = Scanf.sscanf str "%c%s" (fun t v -> (t,v)) in
       match t,v with
       | 'D',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (make_duration 0 0 x 0 0 0))
       | 'M',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (make_duration 0 x 0 0 0 0))
       | 'W',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (make_duration 0 0 (x * 7) 0 0 0))
       | 'Y',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (make_duration x 0 0 0 0 0))
       | _,_ -> None with
    | _ -> None)
  else None
;;
[@@@logic]
