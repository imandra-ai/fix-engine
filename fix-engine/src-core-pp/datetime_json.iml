(** JSON printers/parsers for datetime types. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2022

    datetime_json.iml
*)
[@@@import "../src-core/datetime.iml"]
[@@@import "base_types_json.iml"]
[@@@program]
open Yojson.Basic;;
open Datetime;;
open Base_types_json;;
module JU = Yojson.Basic.Util;;
module D = Decoders_yojson.Basic.Decode;;
open D.Infix;;



let filter_nulls x =
  List.filter (function ( _, `Null ) -> false | _ -> true ) x
;;

let span_to_json (s : T.span) =
  let d, ps = T.Span.to_d_ps s in
  `List [int_to_json d; int_to_json ps]

let span_decoder : T.span D.decoder =
  D.list int_decoder >>= function
  | [d; ps] ->
     begin match T.Span.of_d_ps (d, ps) with
     | Some s -> D.succeed s
     | None -> D.fail "invalid time span"
     end
  | _ -> D.fail "expected [d, ps]"

let ptime_to_json (t : T.t) =
  span_to_json (T.to_span t)

let ptime_decoder : T.t D.decoder =
  D.one_of [("span_decoder",span_decoder >>= fun s ->
  match T.of_span s with
  | Some t -> D.succeed t
  | None -> D.fail "invalid timestamp");

  ]

let validate_with f msg decoder =
  decoder >>= fun x ->
  if f x then D.succeed x else D.fail msg

let utctimestamp_milli_to_json ( ts : fix_utctimestamp_milli )  =
  ptime_to_json ts

let utctimestamp_milli_decoder : fix_utctimestamp_milli Decoders_yojson.Basic.Decode.decoder =
  D.one_of [("ptime_decoder",ptime_decoder
  |> validate_with is_valid_utctimestamp_milli "fix_utctimestamp_milli");
  ("timestamp_decoder", (D.field "utc_timestamp_year" int_decoder) >>= fun utc_timestamp_year ->
    (D.field "utc_timestamp_month" int_decoder) >>= fun utc_timestamp_month ->
    (D.field "utc_timestamp_day" int_decoder) >>= fun utc_timestamp_day ->
    (D.field "utc_timestamp_hour" int_decoder) >>= fun utc_timestamp_hour ->
    (D.field "utc_timestamp_minute" int_decoder) >>= fun utc_timestamp_minute ->
    (D.field "utc_timestamp_second" int_decoder) >>= fun utc_timestamp_second ->
    D.maybe (D.field "utc_timestamp_millisec" int_decoder) >>= fun utc_timestamp_millisec ->
    D.succeed (make_utctimestamp_milli_unsafe
      utc_timestamp_year
     utc_timestamp_month
     utc_timestamp_day
     utc_timestamp_hour
     utc_timestamp_minute
     utc_timestamp_second
     utc_timestamp_millisec
    ))]

let utctimestamp_micro_to_json ( ts : fix_utctimestamp_micro )  =
  ptime_to_json ts

let utctimestamp_micro_decoder : fix_utctimestamp_micro Decoders_yojson.Basic.Decode.decoder =
  D.one_of [("ptime_decoder", ptime_decoder
  |> validate_with is_valid_utctimestamp_micro "fix_utctimestamp_micro");
  ("timestamp_decoder", (D.field "utc_timestamp_year" int_decoder) >>= fun utc_timestamp_year ->
    (D.field "utc_timestamp_month" int_decoder) >>= fun utc_timestamp_month ->
    (D.field "utc_timestamp_day" int_decoder) >>= fun utc_timestamp_day ->
    (D.field "utc_timestamp_hour" int_decoder) >>= fun utc_timestamp_hour ->
    (D.field "utc_timestamp_minute" int_decoder) >>= fun utc_timestamp_minute ->
    (D.field "utc_timestamp_second" int_decoder) >>= fun utc_timestamp_second ->
    D.maybe (D.field "utc_timestamp_microsec" int_decoder) >>= fun utc_timestamp_microsec ->
    D.succeed (make_utctimestamp_micro_unsafe
      utc_timestamp_year
     utc_timestamp_month
     utc_timestamp_day
     utc_timestamp_hour
     utc_timestamp_minute
     utc_timestamp_second
     utc_timestamp_microsec
    ))
  ]

let utctimestamp_nano_to_json ( ts : fix_utctimestamp_nano )  =
ptime_to_json ts

let utctimestamp_nano_decoder : fix_utctimestamp_micro Decoders_yojson.Basic.Decode.decoder =
 ptime_decoder |> validate_with is_valid_utctimestamp_nano "fix_utctimestamp_nano"

let utctimestamp_pico_to_json ( ts : fix_utctimestamp_pico )  =
 ptime_to_json ts

let utctimestamp_pico_decoder : fix_utctimestamp_pico Decoders_yojson.Basic.Decode.decoder =
  ptime_decoder |> validate_with is_valid_utctimestamp_pico "fix_utctimestamp_pico"

let utctimestamp_milli_opt_to_json = function
  | None    -> `Null
  | Some x  -> utctimestamp_milli_to_json x
;;

let utctimestamp_micro_opt_to_json = function
  | None    -> `Null
  | Some x  -> utctimestamp_micro_to_json x
;;

let utctimestamp_nano_opt_to_json = function
  | None    -> `Null
  | Some x  -> utctimestamp_nano_to_json x
;;

let utctimestamp_pico_opt_to_json = function
  | None    -> `Null
  | Some x  -> utctimestamp_pico_to_json x
;;

let duration_to_json ( d : fix_duration ) =
  span_to_json d

let duration_decoder : fix_duration Decoders_yojson.Basic.Decode.decoder =
  span_decoder

let duration_opt_to_json = function
  | None   -> `Null
  | Some x -> duration_to_json x
;;

let localmktdate_to_json ( d : fix_localmktdate ) =
  ptime_to_json d

let localmktdate_decoder : fix_localmktdate Decoders_yojson.Basic.Decode.decoder =
  ptime_decoder
  |> validate_with is_valid_localmktdate "fix_localmktdate"

let localmktdate_opt_to_json = function
  | None    -> `Null
  | Some x  -> localmktdate_to_json x
;;

let utcdateonly_to_json ( d : fix_utcdateonly ) =
  ptime_to_json d

let utcdateonly_decoder : fix_utcdateonly Decoders_yojson.Basic.Decode.decoder =
  ptime_decoder
  |> validate_with is_valid_utcdateonly "fix_utcdateonly"

let utcdateonly_opt_to_json = function
  | None    -> `Null
  | Some x  -> utcdateonly_to_json x
;;

(** UTC Timeonly *)
let utctimeonly_milli_to_json ( d : fix_utctimeonly_milli ) =
  ptime_to_json d

let utctimeonly_milli_decoder : fix_utctimeonly_milli Decoders_yojson.Basic.Decode.decoder =
  D.one_of ["ptime_decoder",ptime_decoder
  |> validate_with is_valid_utctimeonly_milli "fix_utctimeonly_milli";
  "timeonly_decoder",(D.field "utc_timeonly_hour" int_decoder) >>= fun utc_timeonly_hour ->
    (D.field "utc_timeonly_minute" int_decoder) >>= fun utc_timeonly_minute ->
    (D.field "utc_timeonly_second" int_decoder) >>= fun utc_timeonly_second ->
    D.maybe (D.field "utc_timeonly_millisec" int_decoder) >>= fun utc_timeonly_millisec ->
    D.succeed (make_utctimeonly_milli_unsafe
      utc_timeonly_hour
     utc_timeonly_minute
     utc_timeonly_second
    utc_timeonly_millisec
    )]

let utctimeonly_milli_opt_to_json  = function
  | None    -> `Null
  | Some x  -> utctimeonly_milli_to_json x
;;

let utctimeonly_micro_to_json ( d : fix_utctimeonly_micro ) =
  ptime_to_json d

let utctimeonly_micro_decoder : fix_utctimeonly_micro Decoders_yojson.Basic.Decode.decoder =
  D.one_of ["ptime_decoder",ptime_decoder
  |> validate_with is_valid_utctimeonly_micro "fix_utctimeonly_micro";
  "timeonly_decoder",(D.field "utc_timeonly_hour" int_decoder) >>= fun utc_timeonly_hour ->
    (D.field "utc_timeonly_minute" int_decoder) >>= fun utc_timeonly_minute ->
    (D.field "utc_timeonly_second" int_decoder) >>= fun utc_timeonly_second ->
    D.maybe (D.field "utc_timeonly_microsec" int_decoder) >>= fun utc_timeonly_microsec ->
    D.succeed (make_utctimeonly_micro_unsafe
      utc_timeonly_hour
     utc_timeonly_minute
     utc_timeonly_second
    utc_timeonly_microsec
    )
  ]

let utctimeonly_micro_opt_to_json  = function
  | None    -> `Null
  | Some x  -> utctimeonly_micro_to_json x
;;

let utctimeonly_nano_to_json ( d : fix_utctimeonly_nano ) =
  ptime_to_json d

let utctimeonly_nano_decoder : fix_utctimeonly_nano Decoders_yojson.Basic.Decode.decoder =
 ptime_decoder
  |> validate_with is_valid_utctimeonly_nano "fix_utctimeonly_nano"

let utctimeonly_nano_opt_to_json  = function
  | None    -> `Null
  | Some x  -> utctimeonly_nano_to_json x
;;

let utctimeonly_pico_to_json ( d : fix_utctimeonly_pico ) =
  ptime_to_json d

let utctimeonly_pico_decoder : fix_utctimeonly_pico Decoders_yojson.Basic.Decode.decoder =
 ptime_decoder
  |> validate_with is_valid_utctimeonly_pico "fix_utctimeonly_nano"

let utctimeonly_pico_opt_to_json  = function
  | None    -> `Null
  | Some x  -> utctimeonly_pico_to_json x
;;

let week_to_json = let open TE in
  function
  | Week_1 -> `String "Week1"
  | Week_2 -> `String "Week2"
  | Week_3 -> `String "Week3"
  | Week_4 -> `String "Week4"
  | Week_5 -> `String "Week5"
;;

let week_decoder : TE.week Decoders_yojson.Basic.Decode.decoder =
  let open TE in
  D.string >>= (fun w ->
      match w with
      | "Week1" -> D.succeed (Week_1)
      | "Week2" -> D.succeed (Week_2)
      | "Week3" -> D.succeed (Week_3)
      | "Week4" -> D.succeed (Week_4)
      | "Week5" -> D.succeed (Week_5)
      | x -> D.fail (x^" is not a valid Week encoding."));;

let week_opt_to_json = function
  | None    -> `Null
  | Some x  -> week_to_json x
;;

let monthyear_to_json ( (t, w) : fix_monthyear) =
  let list_assoc = [
      ( "t"  , ptime_to_json t );
      ( "week" , week_opt_to_json w );
    ] |> filter_nulls in
  `Assoc list_assoc
;;

let monthyear_decoder : fix_monthyear Decoders_yojson.Basic.Decode.decoder =
  (D.field "t" ptime_decoder) >>= fun t ->
  D.maybe (D.field "week" week_decoder) >>= fun w ->
  let my = (t, w) in
  if is_valid_monthyear my then D.succeed my else D.fail "invalid fix_monthyear"

let monthyear_opt_to_json = function
  | None    -> `Null
  | Some x  -> monthyear_to_json x
;;
[@@@logic]
