(** Parsers for datetime types. *)
(***

    Imandra Inc.
    Copyright (c) 2014 - 2021

    parse_datetime.ml

*)
[@@@import "../src-core/datetime.iml"]
[@@@program]
open Datetime;;


let parse_UTCDateOnly str =
  if String.length str <> 8 then None else
    try let year, month, day = Scanf.sscanf str "%04u%02u%02u"
            ( fun y m d -> (y,m,d) ) in
      Some {
        utc_dateonly_year  = Z.of_int year;
        utc_dateonly_month = Z.of_int month;
        utc_dateonly_day   = Z.of_int day
      }
    with | _ -> None
;;


let parse_LocalMktDate str =
  if String.length str <> 8 then None else
    try let year, month, day = Scanf.sscanf str "%04u%02u%02u"
            ( fun y m d -> (y,m,d) ) in
      Some {
        localmktdate_year  = Z.of_int year;
        localmktdate_month = Z.of_int month;
        localmktdate_day   = Z.of_int day
      } with
    | _ -> None
;;


let parse_UTCTimeOnly_milli str =
  let length = String.length str in
  if (length <> 8) && (length <> 12) then None else
    try let hours, minutes, seconds, mseconds =
          Scanf.sscanf str "%02u:%02u:%02u%s"
            ( fun h m s ms -> (
                  let mseconds = if(ms = "") then None
                    else ( Scanf.sscanf ms ".%03d" (fun x -> Some x) ) in
                  (Z.of_int h,Z.of_int m,Z.of_int s,match mseconds with None -> None | Some c -> Some (Z.of_int c)) ) ) in
      Some {
        utc_timeonly_hour    = hours;
        utc_timeonly_minute  = minutes;
        utc_timeonly_second  = seconds;
        utc_timeonly_millisec = mseconds
      } with
    | _ -> None
;;

let parse_UTCTimeOnly_micro str =
  let length = String.length str in
  if (length <> 8) && (length <> 15) then None else
    try let hours, minutes, seconds, mseconds =
          Scanf.sscanf str "%02u:%02u:%02u%s"
            ( fun h m s ms -> (
                  let mseconds = if(ms = "") then None
                    else ( Scanf.sscanf ms ".%06d" (fun x -> Some x) ) in
                  (Z.of_int h,Z.of_int m,Z.of_int s,match mseconds with None -> None | Some c -> Some (Z.of_int c)) ) ) in
      Some {
        utc_timeonly_hour    = hours;
        utc_timeonly_minute  = minutes;
        utc_timeonly_second  = seconds;
        utc_timeonly_microsec = mseconds
      } with
    | _ -> None
;;

let parse_UTCTimestamp_milli str =
  let length = String.length str in
  if (length <> 17) && (length <> 21) then None else
    try let date, time = Scanf.sscanf str "%s@-%s"
            ( fun d t -> (parse_UTCDateOnly d , parse_UTCTimeOnly_milli t) ) in
      match date, time with
      | (Some date, Some time) -> Some {
          utc_timestamp_year     = date.utc_dateonly_year;
          utc_timestamp_month    = date.utc_dateonly_month;
          utc_timestamp_day      = date.utc_dateonly_day;
          utc_timestamp_hour     = time.utc_timeonly_hour;
          utc_timestamp_minute   = time.utc_timeonly_minute;
          utc_timestamp_second   = time.utc_timeonly_second;
          utc_timestamp_millisec = time.utc_timeonly_millisec }
      | _ -> None with
    | _ -> None
;;

let parse_UTCTimestamp_micro str =
  let length = String.length str in
  if (length <> 17) && (length <> 24) then None else
    try let date, time = Scanf.sscanf str "%s@-%s"
            ( fun d t -> (parse_UTCDateOnly d , parse_UTCTimeOnly_micro t) ) in
      match date, time with
      | (Some date, Some time) -> Some {
          utc_timestamp_year     = date.utc_dateonly_year;
          utc_timestamp_month    = date.utc_dateonly_month;
          utc_timestamp_day      = date.utc_dateonly_day;
          utc_timestamp_hour     = time.utc_timeonly_hour;
          utc_timestamp_minute   = time.utc_timeonly_minute;
          utc_timestamp_second   = time.utc_timeonly_second;
          utc_timestamp_microsec = time.utc_timeonly_microsec }
      | _ -> None
    with | _ -> None
;;

let parse_MonthYear str =
  let length = String.length str in
  if (length < 6) then None else
    try let year, month, tail = Scanf.sscanf str "%04u%02u%s" (fun y m t -> (y,m,t)) in
      let day, week = match tail with
        | "w1" -> None, Some Week_1
        | "w2" -> None, Some Week_2
        | "w3" -> None, Some Week_3
        | "w4" -> None, Some Week_4
        | "w5" -> None, Some Week_5
        | ""   -> None, None
        | day  -> Some (Z.of_string day), None
      in
      Some {
        monthyear_year  = Z.of_int year;
        monthyear_month = Z.of_int month;
        monthyear_day   = day;
        monthyear_week  = week;
      } with
    | _ -> None
;;


let parse_Duration (str:string) : fix_duration option =
  let parse_int ( str : string ) : int option =
    try  Some (Z.of_string str)
    with _ -> None
  in
  if String.length str > 1 then
    (try let t,v = Scanf.sscanf str "%c%s" (fun t v -> (t,v)) in
       match t,v with
       | 'D',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (normalise_duration {
               dur_years    = 0;
               dur_months   = 0;
               dur_days     = x;
               dur_hours    = 0;
               dur_minutes  = 0;
               dur_seconds  = 0;
             }))
       | 'M',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (normalise_duration {
               dur_years    = 0;
               dur_months   = x;
               dur_days     = 0;
               dur_hours    = 0;
               dur_minutes  = 0;
               dur_seconds  = 0;
             }))
       | 'W',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (normalise_duration {
               dur_years    = 0;
               dur_months   = 0;
               dur_days     = x*7;
               dur_hours    = 0;
               dur_minutes  = 0;
               dur_seconds  = 0;
             }))
       | 'Y',x -> (match parse_int x with
           | None -> None
           | Some x -> Some (normalise_duration {
               dur_years    = x;
               dur_months   = 0;
               dur_days     = 0;
               dur_hours    = 0;
               dur_minutes  = 0;
               dur_seconds  = 0;
             }))
       | _,_ -> None with
    | _ -> None)
  else None
;;
[@@@logic]
