(* Imandra Inc. copyright 2021 *)
[@@@import "../../src-model/src-types/model_messages.iml"]

open Model_messages

[@@@import "../../src-core/numeric.iml"]

open Numeric

[@@@import "scenario_type.iml"]

open Scenario_type

[@@@import "../../src-model/src-types/state.iml"]

open State

[@@@import "template.iml"]

open Template

[@@@import "../../src-model/src/venue.iml"]

open Venue

let mod_state_with_event e s =
  match e with
  | Action a ->
      { s with incoming_action = Some a; incoming_msg = FIX_TL_None }
  | Message m ->
      { s with incoming_msg = FIX_TL_Normal m; incoming_action = None }
  [@@macro]


let is_event_valid (e : event) (s : model_state) : bool =
  let e = mod_state_with_event e s in
  is_valid e
  [@@macro] [@@macro]


module Scenario_NewOrderFill = struct end

type region_expander =
  { field_projections : string list list
  ; field_printers : (event -> model_state -> string option) list list
  ; valid_fn : string option
  ; expand_when : string option
  }
[@@program]

type scenario =
  { id : string
  ; name : string option
  ; description : string option
  ; template : t list
  ; region_expander : region_expander list
  ; template_attributes :
      ( string
      * [ `Str of string | `Bool of bool | `Int of int | `Float of fix_float ]
        list )
      list
  ; events_attributes :
      ( string
      * [ `Str of string | `Bool of bool | `Int of int | `Float of fix_float ]
        list )
      list
      list
  }
[@@program]

let scenarios =
  [ { id = "NewOrderFill"
    ; name = Some "NewOrderFill"
    ; description =
        Some
          "Initialise Book State, send NewOrderSingle Message then receive a \
           fill action"
    ; template = [ Template_bookState; Template_NewOrderSingle; Template_fill ]
    ; region_expander =
        [ { field_projections = []
          ; field_printers = []
          ; valid_fn = None
          ; expand_when = None
          }
        ; { field_projections = []
          ; field_printers = []
          ; valid_fn = None
          ; expand_when = None
          }
        ; { field_projections = []
          ; field_printers = []
          ; valid_fn = None
          ; expand_when = None
          }
        ]
    ; template_attributes = []
    ; events_attributes = [ []; []; [] ]
    }
  ]
  [@@program]


let field_projection_to_type x = match x with _ -> "" [@@macro]

let field_projection_to_name x = match x with _ -> "" [@@macro]
