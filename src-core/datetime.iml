(** Implementation of the date/time types and operations. *)

(**

    Imandra Inc.
    Copyright (c) 2014 - 2022

    datetime.iml
*)

[@@@import "../vendor/imandra-ptime/src/imandra_ptime.iml"]
[@@@import "../vendor/imandra-ptime/src/imandra_ptime_extra.iml"]
[@@@import "./ints.iml"]
open Ints

module T = Imandra_ptime
module TE = Imandra_ptime_extra

(* let ps_count_in_us = 1_000_000_000_000 *)
(* let ps_count_in_ms = 1_000_000_000 *)
(* let ps_count_in_s = 1_000_000_000_000 *)
(* let ps_count_in_min = 60_000_000_000_000 *)
(* let ps_count_in_hour = 3600_000_000_000_000 *)

(** UTC Timestamp type. *)
type fix_utctimestamp_milli = T.t
  (* { utc_timestamp_year : int *)
  (* ; utc_timestamp_month : int *)
  (* ; utc_timestamp_day : int *)
  (* ; utc_timestamp_hour : int *)
  (* ; utc_timestamp_minute : int *)
  (* ; utc_timestamp_second : int *)
  (* ; utc_timestamp_millisec : int option *)
  (* } *)



(* let fix_utctimestamp_milli_of_ptime (t : T.t) : fix_utctimestamp_milli = *)
(*   let ((y, m, d), ((hh, mm, ss), _tz)) = T.to_date_time t in *)
(*   let _d, ps = T.to_span t |> T.Span.to_d_ps in *)
(*   let ms = ps mod ps_count_in_ms in *)
(*   { utc_timestamp_year = y *)
(*   ; utc_timestamp_month = m *)
(*   ; utc_timestamp_day = d *)
(*   ; utc_timestamp_hour = hh *)
(*   ; utc_timestamp_minute = mm *)
(*   ; utc_timestamp_second = ss *)
(*   ; utc_timestamp_millisec = if ms = 0 then None else Some ms *)
(*   } *)


type fix_utctimestamp_micro = T.t
  (* { utc_timestamp_year : int *)
  (* ; utc_timestamp_month : int *)
  (* ; utc_timestamp_day : int *)
  (* ; utc_timestamp_hour : int *)
  (* ; utc_timestamp_minute : int *)
  (* ; utc_timestamp_second : int *)
  (* ; utc_timestamp_microsec : int option *)
  (* } *)


(* let fix_utctimestamp_micro_of_ptime (t : T.t) : fix_utctimestamp_micro = *)
(*   let ((y, m, d), ((hh, mm, ss), _tz)) = T.to_date_time t in *)
(*   let _d, ps = T.to_span t |> T.Span.to_d_ps in *)
(*   let us = ps mod ps_count_in_us in *)
(*   { utc_timestamp_year = y *)
(*   ; utc_timestamp_month = m *)
(*   ; utc_timestamp_day = d *)
(*   ; utc_timestamp_hour = hh *)
(*   ; utc_timestamp_minute = mm *)
(*   ; utc_timestamp_second = ss *)
(*   ; utc_timestamp_microsec = if us = 0 then None else Some us *)
(*   } *)


(** Default timestamp is 0 unix epoch timestamp *)
let default_utctimestamp_milli : fix_utctimestamp_milli = T.epoch


(** Default timestamp is 0 unix epoch timestamp *)
let default_utctimestamp_micro  : fix_utctimestamp_micro = T.epoch


(** Constructor for the UTC timestamp milli  *)
let make_utctimestamp_milli
    (year : int)
    (month : int)
    (day : int)
    (hour : int)
    (minute : int)
    (second : int)
    (millisec : int option) : fix_utctimestamp_milli option =
  let date = (year, month, day) in
  let time = (hour, minute, second) in
  let tz = zero in
  T.of_date_time (date, (time, tz))
  |> Option.flat_map (fun t ->
         let ms = millisec |> Option.get_or ~default:zero  in
         T.add_span t (TE.Span.of_int_ms ms))


(** Constructor for the UTC timestamp micro  *)
let make_utctimestamp_micro
    (year : int)
    (month : int)
    (day : int)
    (hour : int)
    (minute : int)
    (second : int)
    (microsec : int option) : fix_utctimestamp_micro option  =
  let date = (year, month, day) in
  let time = (hour, minute, second) in
    let tz = zero in
    T.of_date_time (date, (time, tz))
    |> Option.flat_map (fun t ->
           let us = microsec |> Option.get_or ~default:zero  in
           T.add_span t (TE.Span.of_int_us us))



(** Conversion for the UTC timestamp and timeonly fields *)
let convert_utctimestamp_milli_micro (f1 : fix_utctimestamp_milli) :
    fix_utctimestamp_micro =
  f1

let to_millis t = T.truncate ~frac_s:three t

let convert_utctimestamp_micro_milli (f1 : fix_utctimestamp_micro) :
    fix_utctimestamp_milli =
  to_millis f1

(** Checking validity of the values in the UTC timestamp milli *)
let is_valid_utctimestamp_milli (ts : fix_utctimestamp_milli) =
  TE.is_valid ts


(** Checking validity of the values in the UTC timestamp micro *)
let is_valid_utctimestamp_micro (ts : fix_utctimestamp_micro) =
  TE.is_valid ts


(** Two UTC timestamps are equal if they have equal field values *)
let utctimestamp_Equal_milli_milli
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_milli) =
  T.equal t1 t2


let utctimestamp_Equal_micro_micro
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_micro) =
  T.equal t1 t2


let utctimestamp_Equal_milli_micro
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_micro) =
  T.equal t1 (to_millis t2)


let utctimestamp_Equal_micro_milli
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_milli) =
  T.equal (to_millis t2) t1


(** UTC Timestamp milli base comparison operator *)
let utctimestamp_GreaterThan_milli_milli
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_milli) =
  T.compare t1 t2 > zero


(** UTC Timestamp milli base comparison operator *)
let utctimestamp_GreaterThan_micro_micro
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_micro) =
  T.compare t1 t2 > zero


(** UTC Timestamp base comparison operator - milli to micro *)
let utctimestamp_GreaterThan_milli_micro
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_micro) =
  T.compare t1 (to_millis t2) > zero


(** UTC Timestamp base comparison operator - micro to milli *)
let utctimestamp_GreaterThan_micro_milli
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_milli) =
  T.compare (to_millis t1) t2 > zero


let utctimestamp_GreaterThanEqual_milli_milli
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_milli) =
  T.compare t1 t2 >= zero


let utctimestamp_GreaterThanEqual_micro_micro
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_micro) =
  T.compare t1 t2 >= zero


let utctimestamp_GreaterThanEqual_milli_micro
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_micro) =
  T.compare t1 (to_millis t2) >= zero


let utctimestamp_GreaterThanEqual_micro_milli
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_milli) =
  T.compare (to_millis t1) t2 >= zero


let utctimestamp_LessThan_milli_milli
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_milli) =
  T.compare t1 t2 < zero


let utctimestamp_LessThan_micro_micro
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_micro) =
  T.compare t1 t2 < zero


let utctimestamp_LessThan_milli_micro
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_micro) =
  T.compare t1 (to_millis t2) < zero


let utctimestamp_LessThan_micro_milli
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_milli) =
  T.compare (to_millis t1) t2 < zero


let utctimestamp_LessThanEqual_milli_milli
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_milli) =
  T.compare t1 t2 <= zero


let utctimestamp_LessThanEqual_micro_micro
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_micro) =
  T.compare t1 t2 <= zero


let utctimestamp_LessThanEqual_milli_micro
    (t1 : fix_utctimestamp_milli) (t2 : fix_utctimestamp_micro) =
    T.compare t1 (to_millis t2) <= zero


let utctimestamp_LessThanEqual_micro_milli
    (t1 : fix_utctimestamp_micro) (t2 : fix_utctimestamp_milli) =
    T.compare (to_millis t1) t2 <= zero


(** LocalMktDate type denotes a particular date*)
type fix_localmktdate = T.t

(** Default LocalMktDate corresponds to 0 unix epoch timestamp *)
let default_localmktdate : fix_localmktdate = T.epoch


(** LocalMktDate constructor *)
let make_localmktdate (year : int) (month : int) (day : int) =
  T.of_date (year, month, day)


let is_valid_localmktdate (lmd : fix_localmktdate) =
   let _d, ps = T.Span.to_d_ps (T.to_span lmd) in
   TE.is_valid lmd && ps = zero

let localmktdate_GreaterThan
    (lmd1 : fix_localmktdate) (lmd2 : fix_localmktdate) =
  T.compare lmd1 lmd2 > zero


let localmktdate_LessThan (lmd1 : fix_localmktdate) (lmd2 : fix_localmktdate)
    =
    T.compare lmd1 lmd2 < zero


let localmktdate_Equal (lmd1 : fix_localmktdate) (lmd2 : fix_localmktdate) =
  T.compare lmd1 lmd2 = zero


let localmktdate_GreaterThanEqual
    (lmd1 : fix_localmktdate) (lmd2 : fix_localmktdate) =
  T.compare lmd1 lmd2 >= zero


let localmktdate_LessThanEqual
    (lmd1 : fix_localmktdate) (lmd2 : fix_localmktdate) =
  T.compare lmd1 lmd2 <= zero


(** Week *)
type fix_week =
  | Week_1
  | Week_2
  | Week_3
  | Week_4
  | Week_5

(** MonthYear *)
type fix_monthyear =
  { monthyear_year : int
  ; monthyear_month : int
  ; monthyear_day : int option
  ; monthyear_week : fix_week option
  }

let default_monthyear =
  { monthyear_year = 1970
  ; monthyear_month = 1
  ; monthyear_day = Some 1
  ; monthyear_week = None
  }


let make_monthyear (year : int) (month : int) (week : fix_week option) =
  { monthyear_year = year
  ; monthyear_month = month
  ; monthyear_day = None
  ; monthyear_week = week
  }


let is_valid_monthyear (my : fix_monthyear) =
  0 <= my.monthyear_year
  && my.monthyear_year <= 9999
  && 1 <= my.monthyear_month
  && my.monthyear_month <= 12
  && (match my.monthyear_day with None -> true | Some d -> 0 <= d && d <= 31)
  &&
  (* You can only specify one of them, but not both. *)
  match (my.monthyear_day, my.monthyear_week) with
  | Some _, Some _ ->
      false
  | _, _ ->
      true


(** TODO: Add support for weeks! *)
let monthyear_GreaterThan (myOne : fix_monthyear) (myTwo : fix_monthyear) =
  if myOne.monthyear_year > myTwo.monthyear_year
  then true
  else if myOne.monthyear_year < myTwo.monthyear_year
  then false
  else if myOne.monthyear_month > myTwo.monthyear_month
  then true
  else if myOne.monthyear_month < myTwo.monthyear_month
  then false
  else
    match (myOne.monthyear_day, myTwo.monthyear_day) with
    | None, None ->
        false
    | Some _d, None ->
        true
    | None, Some _d ->
        false
    | Some d_one, Some d_two ->
        d_one > d_two


let monthyear_LessThan (myOne : fix_monthyear) (myTwo : fix_monthyear) =
  if myOne.monthyear_year < myTwo.monthyear_year
  then true
  else if myOne.monthyear_year > myTwo.monthyear_year
  then false
  else if myOne.monthyear_month < myTwo.monthyear_month
  then true
  else if myOne.monthyear_month > myTwo.monthyear_month
  then false
  else
    match (myOne.monthyear_day, myTwo.monthyear_day) with
    | None, None ->
        false
    | Some _d, None ->
        false
    | None, Some _d ->
        true
    | Some d_one, Some d_two ->
        d_one > d_two


let monthyear_Equal (myOne : fix_monthyear) (myTwo : fix_monthyear) =
  myOne.monthyear_year = myTwo.monthyear_year
  && myOne.monthyear_month = myTwo.monthyear_month
  && myOne.monthyear_day = myTwo.monthyear_day


let monthyear_GreaterThanEqual (myOne : fix_monthyear) (myTwo : fix_monthyear) =
  monthyear_GreaterThan myOne myTwo || monthyear_Equal myOne myTwo


let monthyear_LessThanEqual (myOne : fix_monthyear) (myTwo : fix_monthyear) =
  monthyear_LessThan myOne myTwo || monthyear_Equal myOne myTwo


(** UTC Timeonly *)
type fix_utctimeonly_milli = T.t

type fix_utctimeonly_micro = T.t

let default_utctimeonly_milli = T.epoch

let default_utctimeonly_micro = T.epoch


let make_utctimeonly_milli
    (hour : int) (minute : int) (second : int) (millisec : int option) :
    fix_utctimeonly_milli option =
  make_utctimestamp_milli epoch_year one one hour minute second millisec


let make_utctimeonly_micro
    (hour : int) (minute : int) (second : int) (microsec : int option) :
    fix_utctimeonly_micro option =
  make_utctimestamp_micro epoch_year one one hour minute second microsec


let convert_utctimeonly_milli_micro (f1 : fix_utctimeonly_milli) :
    fix_utctimeonly_micro = f1


let convert_utctimeonly_micro_milli (f1 : fix_utctimeonly_micro) :
    fix_utctimeonly_milli =
  to_millis f1


let is_valid_utctimeonly_milli (t : fix_utctimeonly_milli) =
  let s = T.to_span t in
  let (d, _ps) = T.Span.to_d_ps s in
  d = zero && TE.Span.is_valid s

let is_valid_utctimeonly_micro (t : fix_utctimeonly_micro) =
  let s = T.to_span t in
  let (d, _ps) = T.Span.to_d_ps s in
  d = zero && TE.Span.is_valid s


let utctimeonly_Equal_milli_milli
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_milli) =
  T.equal t1 t2


let utctimeonly_Equal_micro_micro
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_micro) =
  T.equal t1 t2


let utctimeonly_Equal_milli_micro
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_micro) =
  T.equal t1 (to_millis t2)


let utctimeonly_Equal_micro_milli
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_milli) =
  T.equal (to_millis t1) t2


let utctimeonly_GreaterThan_milli_milli
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_milli) =
  T.compare t1 t2 > zero


let utctimeonly_GreaterThan_micro_micro
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_micro) =
  T.compare t1 t2 > zero


let utctimeonly_GreaterThan_milli_micro
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_micro) =
  T.compare t1 (to_millis t2) > zero


let utctimeonly_GreaterThan_micro_milli
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_milli) =
  T.compare (to_millis t1) t2 > zero


let utctimeonly_LessThan_milli_milli
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_milli) =
  T.compare t1 t2 < zero


let utctimeonly_LessThan_micro_micro
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_micro) =
  T.compare t1 t2 < zero


let utctimeonly_LessThan_milli_micro
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_micro) =
  T.compare t1 (to_millis t2) < zero


let utctimeonly_LessThan_micro_milli
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_milli) =
  T.compare (to_millis t1) t2 < zero


let utctimeonly_LessThanEqual_milli_milli
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_milli) =
  T.compare t1 t2 <= zero


let utctimeonly_LessThanEqual_micro_micro
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_micro) =
  T.compare t1 t2 <= zero


let utctimeonly_LessThanEqual_milli_micro
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_micro) =
  T.compare t1 (to_millis t2) <= zero


let utctimeonly_LessThanEqual_micro_milli
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_milli) =
  T.compare (to_millis t1) t2 <= zero


let utctimeonly_GreaterThanEqual_milli_milli
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_milli) =
  T.compare t1 t2 >= zero


let utctimeonly_GreaterThanEqual_micro_micro
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_micro) =
  T.compare t1 t2 >= zero


let utctimeonly_GreaterThanEqual_milli_micro
    (t1 : fix_utctimeonly_milli) (t2 : fix_utctimeonly_micro) =
  T.compare t1 (to_millis t2) >= zero


let utctimeonly_GreaterThanEqual_micro_milli
    (t1 : fix_utctimeonly_micro) (t2 : fix_utctimeonly_milli) =
  T.compare (to_millis t1) t2 >= zero


(** UTC Dateonly *)
type fix_utcdateonly = T.t

(** UTC Dateonly *)
let default_utcdateonly = T.epoch


let make_utcdateonly (year : int) (month : int) (day : int) =
  T.of_date (year, month, day)


let is_valid_utcdateonly (d : fix_utcdateonly) =
  let _d, ps = d |> T.to_span |> T.Span.to_d_ps in
  ps = zero && TE.is_valid d


let utcdateonly_GreaterThan (d1 : fix_utcdateonly) (d2 : fix_utcdateonly) =
  T.compare d1 d2 > zero


let utcdateonly_LessThan (d1 : fix_utcdateonly) (d2 : fix_utcdateonly) =
  T.compare d1 d2 < zero


let utcdateonly_Equal (d1 : fix_utcdateonly) (d2 : fix_utcdateonly) =
  T.equal d1 d2

let utcdateonly_GreaterThanEqual
    (d1 : fix_utcdateonly) (d2 : fix_utcdateonly) =
  T.compare d1 d2 >= zero


let utcdateonly_LessThanEqual (d1 : fix_utcdateonly) (d2 : fix_utcdateonly) =
    T.compare d1 d2 <= zero


(** Duration *)
type fix_duration = T.Span.t

let is_valid_duration (dur : fix_duration) = TE.Span.is_valid dur


let make_duration years months days hours minutes seconds =
  let d = years * 365 + months * 12 + days in
  let secs = hours * 3600 + minutes * 60 + seconds in
  T.Span.(add (unsafe_of_d_ps (d, 0)) (of_int_s secs))


let utctimestamp_milli_duration_Add
    (t : fix_utctimestamp_milli) (dur : fix_duration) =
  T.add_span t dur


let duration_utctimestamp_milli_Add
    (dur : fix_duration) (t : fix_utctimestamp_milli) =
  T.add_span t dur


let utctimestamp_micro_duration_Add
    (t : fix_utctimestamp_micro) (dur : fix_duration) =
  T.add_span t dur


let duration_utctimestamp_micro_Add
    (dur : fix_duration) (t : fix_utctimestamp_micro) =
  T.add_span t dur


let seconds_to_duration seconds =
  T.Span.of_int_s seconds


let duration_to_seconds dur =
  T.Span.to_int_s dur

let duration_Equal dur1 dur2 = T.Span.equal dur1 dur2

let duration_GreaterThan dur1 dur2 =
  dur1.dur_years > dur2.dur_years
  || (dur1.dur_years = dur2.dur_years && dur1.dur_months > dur2.dur_months)
  || (dur1.dur_months = dur2.dur_months && dur1.dur_days > dur2.dur_days)
  || (dur1.dur_days = dur2.dur_days && dur1.dur_hours > dur2.dur_hours)
  || (dur1.dur_hours = dur2.dur_hours && dur1.dur_minutes > dur2.dur_minutes)
  || (dur1.dur_minutes = dur2.dur_minutes && dur1.dur_seconds > dur2.dur_seconds)


let duration_GreaterThanEqual dur1 dur2 =
  duration_GreaterThan dur1 dur2 || duration_Equal dur1 dur2


let duration_LessThan dur1 dur2 = not (duration_GreaterThanEqual dur1 dur2)

let duration_LessThanEqual dur1 dur2 = not (duration_GreaterThan dur1 dur2)

let convert_utctimestamp_milli_utctimeonly_milli (ts : fix_utctimestamp_milli) :
    fix_utctimeonly_milli =
  { utc_timeonly_hour = ts.utc_timestamp_hour
  ; utc_timeonly_minute = ts.utc_timestamp_minute
  ; utc_timeonly_second = ts.utc_timestamp_second
  ; utc_timeonly_millisec = ts.utc_timestamp_millisec
  }


let convert_utctimestamp_micro_utctimeonly_micro (ts : fix_utctimestamp_micro) :
    fix_utctimeonly_micro =
  { utc_timeonly_hour = ts.utc_timestamp_hour
  ; utc_timeonly_minute = ts.utc_timestamp_minute
  ; utc_timeonly_second = ts.utc_timestamp_second
  ; utc_timeonly_microsec = ts.utc_timestamp_microsec
  }


let convert_utctimestamp_milli_utctimeonly_micro (ts : fix_utctimestamp_milli) :
    fix_utctimeonly_micro =
  { utc_timeonly_hour = ts.utc_timestamp_hour
  ; utc_timeonly_minute = ts.utc_timestamp_minute
  ; utc_timeonly_second = ts.utc_timestamp_second
  ; utc_timeonly_microsec =
      ( match ts.utc_timestamp_millisec with
      | None ->
          None
      | Some x ->
          Some (x * 1000) )
  }


let convert_utctimestamp_micro_utctimeonly_milli (ts : fix_utctimestamp_micro) :
    fix_utctimeonly_milli =
  { utc_timeonly_hour = ts.utc_timestamp_hour
  ; utc_timeonly_minute = ts.utc_timestamp_minute
  ; utc_timeonly_second = ts.utc_timestamp_second
  ; utc_timeonly_millisec =
      ( match ts.utc_timestamp_microsec with
      | None ->
          None
      | Some x ->
          Some (x / 1000) )
  }


let convert_utctimestamp_micro_localmktdate (ts : fix_utctimestamp_micro) :
    fix_localmktdate =
  { localmktdate_year = ts.utc_timestamp_year
  ; localmktdate_month = ts.utc_timestamp_month
  ; localmktdate_day = ts.utc_timestamp_day
  }


let convert_utctimestamp_milli_localmktdate (ts : fix_utctimestamp_milli) :
    fix_localmktdate =
  { localmktdate_year = ts.utc_timestamp_year
  ; localmktdate_month = ts.utc_timestamp_month
  ; localmktdate_day = ts.utc_timestamp_day
  }


let convert_utctimestamp_micro_utcdateonly (ts : fix_utctimestamp_micro) :
    fix_utcdateonly =
  { utc_dateonly_year = ts.utc_timestamp_year
  ; utc_dateonly_month = ts.utc_timestamp_month
  ; utc_dateonly_day = ts.utc_timestamp_day
  }


let convert_utctimestamp_milli_utcdateonly (ts : fix_utctimestamp_milli) :
    fix_utcdateonly =
  { utc_dateonly_year = ts.utc_timestamp_year
  ; utc_dateonly_month = ts.utc_timestamp_month
  ; utc_dateonly_day = ts.utc_timestamp_day
  }


let convert_utctimestamp_micro_monthyear (ts : fix_utctimestamp_micro) :
    fix_monthyear =
  { monthyear_year = ts.utc_timestamp_year
  ; monthyear_month = ts.utc_timestamp_month
  ; monthyear_day = Some ts.utc_timestamp_day
  ; monthyear_week = None
  }


let convert_utctimestamp_milli_monthyear (ts : fix_utctimestamp_milli) :
    fix_monthyear =
  { monthyear_year = ts.utc_timestamp_year
  ; monthyear_month = ts.utc_timestamp_month
  ; monthyear_day = Some ts.utc_timestamp_day
  ; monthyear_week = None
  }


let make_utctimestamp_micro_utctimeonly_micro_utcdateonly
    (to_ : fix_utctimeonly_micro) (do_ : fix_utcdateonly) :
    fix_utctimestamp_micro =
  { utc_timestamp_microsec = to_.utc_timeonly_microsec
  ; utc_timestamp_second = to_.utc_timeonly_second
  ; utc_timestamp_minute = to_.utc_timeonly_minute
  ; utc_timestamp_hour = to_.utc_timeonly_hour
  ; utc_timestamp_day = do_.utc_dateonly_day
  ; utc_timestamp_month = do_.utc_dateonly_month
  ; utc_timestamp_year = do_.utc_dateonly_year
  }


let make_utctimestamp_milli_utctimeonly_milli_utcdateonly
    (to_ : fix_utctimeonly_milli) (do_ : fix_utcdateonly) :
    fix_utctimestamp_milli =
  { utc_timestamp_millisec = to_.utc_timeonly_millisec
  ; utc_timestamp_second = to_.utc_timeonly_second
  ; utc_timestamp_minute = to_.utc_timeonly_minute
  ; utc_timestamp_hour = to_.utc_timeonly_hour
  ; utc_timestamp_day = do_.utc_dateonly_day
  ; utc_timestamp_month = do_.utc_dateonly_month
  ; utc_timestamp_year = do_.utc_dateonly_year
  }


let make_utctimestamp_micro_utctimeonly_milli_utcdateonly
    (to_ : fix_utctimeonly_milli) (do_ : fix_utcdateonly) :
    fix_utctimestamp_micro =
  { utc_timestamp_microsec =
      ( match to_.utc_timeonly_millisec with
      | None ->
          None
      | Some x ->
          Some (x * 1000) )
  ; utc_timestamp_second = to_.utc_timeonly_second
  ; utc_timestamp_minute = to_.utc_timeonly_minute
  ; utc_timestamp_hour = to_.utc_timeonly_hour
  ; utc_timestamp_day = do_.utc_dateonly_day
  ; utc_timestamp_month = do_.utc_dateonly_month
  ; utc_timestamp_year = do_.utc_dateonly_year
  }


let make_utctimestamp_milli_utctimeonly_micro_utcdateonly
    (to_ : fix_utctimeonly_micro) (do_ : fix_utcdateonly) :
    fix_utctimestamp_milli =
  { utc_timestamp_millisec =
      ( match to_.utc_timeonly_microsec with
      | None ->
          None
      | Some x ->
          Some (x / 1000) )
  ; utc_timestamp_second = to_.utc_timeonly_second
  ; utc_timestamp_minute = to_.utc_timeonly_minute
  ; utc_timestamp_hour = to_.utc_timeonly_hour
  ; utc_timestamp_day = do_.utc_dateonly_day
  ; utc_timestamp_month = do_.utc_dateonly_month
  ; utc_timestamp_year = do_.utc_dateonly_year
  }
