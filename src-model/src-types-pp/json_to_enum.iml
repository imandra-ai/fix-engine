(* Imandra Inc. copyright 2021 *)
[@@@program]

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode.Infix

[@@@import "../src-types/model_app_enums.iml"]

open Model_app_enums

[@@@import "../src-strings-venue/model_enum_names.iml"]

open Model_enum_names

let mod_enum_side_decoder : model_fix_side decoder =
  string
  >>= fun x ->
  match string_to_mod_side_opt x with
  | None ->
      fail "Unknown enum (Side) encoding."
  | Some y ->
      succeed y


let mod_enum_ordtype_decoder : model_fix_ordtype decoder =
  string
  >>= fun x ->
  match string_to_mod_ordtype_opt x with
  | None ->
      fail "Unknown enum (OrdType) encoding."
  | Some y ->
      succeed y


let mod_enum_execinst_decoder : (model_fix_execinst, bool) Map.t decoder =
  list
    ( string
    >>= fun x ->
    match string_to_mod_execinst_opt x with
    | None ->
        fail "Unknown enum (ExecInst) encoding."
    | Some y ->
        succeed y )
  >>= fun m ->
  succeed (Map.of_list ~default:false (List.map (fun a -> (a, true)) m))


let mod_enum_exectype_decoder : model_fix_exectype decoder =
  string
  >>= fun x ->
  match string_to_mod_exectype_opt x with
  | None ->
      fail "Unknown enum (ExecType) encoding."
  | Some y ->
      succeed y


let mod_enum_ordstatus_decoder : model_fix_ordstatus decoder =
  string
  >>= fun x ->
  match string_to_mod_ordstatus_opt x with
  | None ->
      fail "Unknown enum (OrdStatus) encoding."
  | Some y ->
      succeed y


let mod_enum_partysubidtype_decoder : model_fix_partysubidtype decoder =
  string
  >>= fun x ->
  match string_to_mod_partysubidtype_opt x with
  | None ->
      fail "Unknown enum (PartySubIDType) encoding."
  | Some y ->
      succeed y


[@@@logic]
