(* Imandra Inc. copyright 2021 *)
[@@@program]

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode.Infix

[@@@import "../src-types/model_messages.iml"]

open Model_messages

[@@@import "../src-types/model_repeating_groups.iml"]

open Model_repeating_groups

[@@@import "../src-string-factory/model_tag_names.iml"]

open Model_tag_names

[@@@import "../src-types/model_tags.iml"]

open Model_tags

let message_tag_decoder : m_msg_tag decoder =
  string
  >>= fun x ->
  match tag_to_message x with
  | None ->
      fail ("Unknown message tag (" ^ x ^ ") in decoding")
  | Some y ->
      succeed y


let field_tag_decoder : m_field_tag decoder =
  string
  >>= fun x ->
  match tag_to_field x with
  | None ->
      fail ("Unknown field tag (" ^ x ^ ") in decoding")
  | Some y ->
      succeed y


let rg_tag_decoder : repeating_group_defs option decoder =
  maybe string
  >>= fun x ->
  match x with
  | None ->
      succeed None
  | Some x ->
    (match tag_to_rg x with None -> succeed None | Some y -> succeed (Some y))


let field_missing_data_decoder : field_missing_or_invalid_data decoder =
  field "m_msg_tag" message_tag_decoder
  >>= fun msg ->
  field "m_field_tag" field_tag_decoder
  >>= fun f ->
  field "repeating_group_defs" rg_tag_decoder
  >>= fun s ->
  succeed
    { field_missing_or_invalid_data_field = f
    ; field_missing_of_invalid_data_msg = msg
    ; repeating_group_origin = s
    }


[@@@logic]
