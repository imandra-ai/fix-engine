(* Imandra Inc. copyright 2021 *)
[@@@program]

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode

[@@@require "decoders-yojson"]

open Decoders_yojson.Basic.Decode.Infix

[@@@import "json_to_action.iml"]

open Json_to_action

[@@@import "json_to_internal.iml"]

open Json_to_internal

[@@@import "json_to_message.iml"]

open Json_to_message

[@@@import "../src-types/model_messages.iml"]

open Model_messages

[@@@import "../src-types/state.iml"]

open State

let outgoing_decoder =
  field "outgoing_msg_counter" string
  >>= fun c ->
  field "outgoing_msg_msg" model_message_decoder
  >>= fun m ->
  succeed { outgoing_msg_counter = Z.of_string c; outgoing_msg_msg = m }


let state_info_decoder =
  field "state_event_counter" string
  >>= fun c ->
  field_opt "state_event_reject_text" string
  >>= fun m ->
  succeed
    { state_event_counter = Z.of_string c
    ; state_event_reject_text = (match m with None -> None | Some x -> Some x)
    }


let model_state_decoder : model_state decoder =
  field "fresh_state'" internal_fresh_state'_decoder
  >>= fun f_internal_fresh_state' ->
  field "state" internal_state_decoder
  >>= fun f_internal_state ->
  field "incoming_action" (nullable fix_action_decoder)
  >>= fun incoming_action ->
  field "event_counter" string
  >>= fun event_counter ->
  field "incoming_msg" (nullable top_level_message_decoder)
  >>= fun incoming_msg ->
  field "outgoing_msgs" (list outgoing_decoder)
  >>= fun outgoing_msgs ->
  field "event_info" (list state_info_decoder)
  >>= fun event_info ->
  succeed
    { f_internal_state
    ; f_internal_fresh_state'
    ; incoming_action
    ; incoming_msg =
        (match incoming_msg with None -> FIX_TL_None | Some x -> x)
    ; outgoing_msgs
    ; event_counter = Z.of_string event_counter
    ; event_info
    }


[@@@logic]
